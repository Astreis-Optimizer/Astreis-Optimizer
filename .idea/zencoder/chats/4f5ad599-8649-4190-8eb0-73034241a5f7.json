{
    "checksum": "44420cfe52fc8d530a688dae6bd178bd861ec0dd2e72c57df049f37f1239aaf3",
    "data": {
    "id": "4f5ad599-8649-4190-8eb0-73034241a5f7",
    "createdAt": 1751195927797,
    "updatedAt": 1751195943126,
    "title": "Performance Optimization UI Setup",
    "messages": [
        {
            "id": "4fa91fac-158e-4b32-a1ee-48b4e3cbfa2f",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "ok so the optimize button next to each frame just run 1 command like run_fps_pack() simple function and 2nd make it easy to add like this easy addable in the page 4: Performance_Frames = [ { \"title\": \"Max FPS PACK\", \"desc\": \"Improves FPS\", \"warn\": \"⚠️ Heat\", \"desc_color\": \"default\", \"warn_color\": \"yellow\", \"command\": AstreisFunc.maxfps() } ]"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nfrom optimization_worker import OptimizationWorker\nimport sys\nimport os\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\n\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        super().__init__(parent)\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        super().__init__()\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\nclass SetupMainWindow:\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    def __init__(self, ui, option_functions):\n        self.ui = ui\n        self.settings = Settings().items\n        self.themes = Themes().items\n        self.option_functions = option_functions\n        self.current_frame_index = 0\n\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def create_pack_frame(self, option, themes, option_functions):\n        frame = QFrame()\n        frame.setStyleSheet(f\"background-color: {themes['app_color']['dark_three']}; border-radius: 10px;\")\n        frame.setMinimumHeight(100)\n        pack_layout = QHBoxLayout(frame)\n        pack_layout.setContentsMargins(10, 5, 10, 5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(32, 32)\n        icon_path = Functions.set_svg_icon(option[\"icon\"])\n        if os.path.exists(icon_path):\n            icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(32, 32, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        else:\n            print(f\"Icon not found: {icon_path}\")\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        pack_layout.addWidget(icon_label)\n        text_layout = QVBoxLayout()\n        title_label = QLabel(option[\"title\"])\n        title_label.setStyleSheet(f\"color: {themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n        title_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        text_layout.addWidget(title_label)\n        desc_label = QLabel(option[\"desc\"])\n        desc_label.setStyleSheet(f\"color: {themes['app_color']['text_description']}; font: 10pt 'Segoe UI';\")\n        desc_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        desc_label.setWordWrap(True)\n        text_layout.addWidget(desc_label)\n        pack_layout.addLayout(text_layout)\n        pack_layout.addStretch()\n        pack_button = QPushButton(\"Optimize\")\n        pack_button.setMinimumSize(100, 40)\n        pack_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font: bold 12pt 'Segoe UI';\n            }}\n            QPushButton:hover {{\n                background-color: {themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        pack_button.clicked.connect(lambda: self.run_single_optimization(option[\"title\"], option_functions))\n        pack_layout.addWidget(pack_button)\n        return frame\n\n    def run_single_optimization(self, title, option_functions):\n        try:\n            print(f\"Running optimization for: {title}\")\n            progress_dialog = QProgressDialog(f\"Running {title}...\", \"Cancel\", 0, 100, self.ui.central_widget)\n            progress_dialog.setWindowTitle(\"Optimization Progress\")\n            progress_dialog.setMinimumSize(500, 150)\n            progress_dialog.setStyleSheet(f\"\"\"\n                QProgressDialog {{\n                    background-color: {self.themes['app_color']['dark_one']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 10px;\n                    font-family: 'Segoe UI';\n                    font-size: 12pt;\n                }}\n                QProgressBar {{\n                    background-color: {self.themes['app_color']['dark_two']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 8px;\n                    text-align: center;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-height: 25px;\n                }}\n                QProgressBar::chunk {{\n                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                        stop:0 {self.themes['app_color']['context_color']},\n                        stop:1 {self.themes['app_color']['context_hover']});\n                    border-radius: 6px;\n                    margin: 2px;\n                }}\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 6px;\n                    padding: 8px 16px;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-width: 80px;\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                }}\n                QPushButton:disabled {{\n                    background-color: #555555;\n                    color: #FFFFFF;\n                }}\n                QLabel {{\n                    color: {self.themes['app_color']['text_foreground']};\n                    font-size: 11pt;\n                    font-weight: bold;\n                    padding: 5px;\n                }}\n            \"\"\")\n            progress_dialog.setModal(True)\n            progress_dialog.setAutoClose(False)\n            progress_dialog.setAutoReset(False)\n            optimization_thread = QThread(self.ui.central_widget)\n            optimization_worker = OptimizationWorker([(title, \"Single\")], option_functions)\n            optimization_worker.moveToThread(optimization_thread)\n            optimization_worker.progress_update.connect(lambda value, text: (progress_dialog.setValue(value), progress_dialog.setLabelText(text)))\n            optimization_worker.result_ready.connect(lambda result, success: self.show_optimization_result(result, success, progress_dialog))\n            optimization_thread.started.connect(optimization_worker.run)\n            optimization_worker.finished.connect(progress_dialog.close)\n            optimization_worker.finished.connect(optimization_thread.quit)\n            optimization_worker.finished.connect(optimization_worker.deleteLater)\n            optimization_thread.finished.connect(optimization_thread.deleteLater)\n            progress_dialog.canceled.connect(optimization_worker.stop)\n            progress_dialog.show()\n            optimization_thread.start()\n        except Exception as e:\n            print(f\"Error running {title}: {str(e)}\")\n            show_critical_message(self.ui.central_widget, \"Error\", f\"An error occurred while running {title}: {str(e)}\")\n\n    def show_optimization_result(self, result, success, progress_dialog):\n        progress_dialog.close()\n        msg_box = PyMessageBox(self.ui.central_widget)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        msg_box.setText(result)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def prev_frame(self):\n        self.current_frame_index = (self.current_frame_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def switch_frame(self):\n        self.current_frame_index = (self.current_frame_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def optimize_selected(self):\n        # Placeholder for running multiple optimizations if needed\n        pass\n\n    def setup_gui(self):\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self.ui.central_widget, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self.ui.central_widget, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self.ui.central_widget, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self.ui.central_widget, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self.ui.central_widget, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self.ui.central_widget, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self.ui.central_widget, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self.ui.central_widget, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(self.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(self.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self.ui.central_widget,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = self.create_tab_header(\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\"\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\"\n        )\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except PermissionError:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        except Exception:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n        def clear_chat_ui():\n            AstreisFunc.clear_history()\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        packs_scroll_area = QScrollArea()\n        packs_scroll_area.setWidgetResizable(True)\n        packs_scroll_content = QWidget()\n        packs_scroll_layout = QVBoxLayout(packs_scroll_content)\n        packs_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        packs_scroll_layout.setSpacing(10)\n        packs_scroll_area.setWidget(packs_scroll_content)\n        packs_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        packs_scroll_area.setGraphicsEffect(shadow)\n        packs_scroll_area.setMinimumHeight(300)\n        pack_options = [\n            {\n                \"title\": \"FPS Performance Pack\",\n                \"desc\": \"Optimize for gaming performance\",\n                \"icon\": \"icon_game.svg\"\n            },\n            {\n                \"title\": \"Boost Up PC Pack\",\n                \"desc\": \"Maximize overall PC performance\",\n                \"icon\": \"icon_speed.svg\"\n            },\n            {\n                \"title\": \"Reduce PING Pack\",\n                \"desc\": \"Improve network latency\",\n                \"icon\": \"icon_network.svg\"\n            }\n        ]\n        for option in pack_options:\n            frame = self.create_pack_frame(option, self.themes, self.option_functions)\n            packs_scroll_layout.addWidget(frame)\n        page_3_layout.addWidget(packs_scroll_area, stretch=1)\n        advanced_frame = QFrame()\n        advanced_frame.setStyleSheet(f\"background: transparent;\")\n        advanced_frame.setMinimumSize(0, 60)\n        advanced_layout = QHBoxLayout(advanced_frame)\n        advanced_layout.setContentsMargins(10, 5, 10, 5)\n        advanced_layout.setAlignment(QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 40)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background: transparent;\n                color: #FFFFFF;\n                border: none;\n                font: bold 14pt 'Segoe UI';\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                color: {self.themes['app_color']['context_hover']};\n            }}\n            QPushButton:pressed {{\n                color: {self.themes['app_color']['context_pressed']};\n            }}\n        \"\"\")\n        def slide_to_page_4():\n            anim = QPropertyAnimation(self.ui.load_pages.page_4, b\"geometry\")\n            anim.setEasingCurve(QEasingCurve.InOutQuad)\n            anim.setDuration(500)\n            start_rect = self.ui.load_pages.page_4.geometry()\n            start_rect.moveTop(self.ui.central_widget.height())\n            end_rect = self.ui.load_pages.page_4.geometry()\n            end_rect.moveTop(0)\n            anim.setStartValue(start_rect)\n            anim.setEndValue(end_rect)\n            anim.start()\n            MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_4)\n        show_advanced_button.clicked.connect(slide_to_page_4)\n        advanced_layout.addWidget(show_advanced_button)\n        page_3_layout.addWidget(advanced_frame, alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize CPU Performance\",\n                \"desc\": \"Maximize CPU scheduling and disable power management\",\n                \"warn\": \"⚠️Overheating Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Background Apps\",\n                \"desc\": \"Stop all background apps to free system resources\",\n                \"warn\": \"⚠️May Break Apps\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Update\",\n                \"desc\": \"Disable automatic updates to prevent interruptions\",\n                \"warn\": \"⚠️Updates will not be installed automatically\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Automatic Restart\",\n                \"desc\": \"Prevent automatic restart after crashes or errors\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Sleep Mode\",\n                \"desc\": \"Disable sleep mode to keep the computer awake\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Defender\",\n                \"desc\": \"Disable Windows Defender to reduce CPU and disk usage\",\n                \"warn\": \"⚠️High Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean System Logs\",\n                \"desc\": \"Remove system logs to free up space\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            },\n            {\n                \"title\": \"Run Disk Cleanup\",\n                \"desc\": \"Perform disk cleanup to optimize storage\",\n                \"warn\": \"Recommended once a week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Run Debloat Utility\",\n                \"desc\": \"Run Windows Debloat Utility @Raphire\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"Recommended once a Week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Enable TCP Fast Open\",\n                \"desc\": \"Improve network performance by enabling TCP Fast Open\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Microsoft Store Cache\",\n                \"desc\": \"Clears cached files from the Microsoft Store\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Event Logs\",\n                \"desc\": \"Clear event logs to improve internet performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable IPv6\",\n                \"desc\": \"Disable IPv6 protocol for improved performance\",\n                \"warn\": \"⚠️Be Cautious\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Firewall\",\n                \"desc\": \"Disables Firewall\",\n                \"warn\": \"⚠️Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Wifi Speed Test\",\n                \"desc\": \"Test your WiFi speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize All\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(self.optimize_selected)\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "AstreisFunc/__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\AstreisFunc\\__init__.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\widgets\\py_title_bar.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\widgets\\py_title_bar.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "settings.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\settings.json",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\top_level.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\top_level.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\entry_points.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\entry_points.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\SOURCES.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\SOURCES.txt",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\functions.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\functions.py",
                        "sources": []
                    },
                    {
                        "path": "AstreisFunc\\__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\AstreisFunc\\__init__.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\ui_main_pages.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\ui_main_pages.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "gui\\uis\\windows\\main_window\\setup_main_window.py"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nfrom optimization_worker import OptimizationWorker\nimport sys\nimport os\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\n\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        super().__init__(parent)\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        super().__init__()\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\nclass SetupMainWindow:\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    def __init__(self, ui, option_functions):\n        self.ui = ui\n        self.settings = Settings().items\n        self.themes = Themes().items\n        self.option_functions = option_functions\n        self.current_frame_index = 0\n\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def create_pack_frame(self, option, themes, option_functions):\n        frame = QFrame()\n        frame.setStyleSheet(f\"background-color: {themes['app_color']['dark_three']}; border-radius: 10px;\")\n        frame.setMinimumHeight(100)\n        pack_layout = QHBoxLayout(frame)\n        pack_layout.setContentsMargins(10, 5, 10, 5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(32, 32)\n        icon_path = Functions.set_svg_icon(option[\"icon\"])\n        if os.path.exists(icon_path):\n            icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(32, 32, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        else:\n            print(f\"Icon not found: {icon_path}\")\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        pack_layout.addWidget(icon_label)\n        text_layout = QVBoxLayout()\n        title_label = QLabel(option[\"title\"])\n        title_label.setStyleSheet(f\"color: {themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n        title_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        text_layout.addWidget(title_label)\n        desc_label = QLabel(option[\"desc\"])\n        desc_label.setStyleSheet(f\"color: {themes['app_color']['text_description']}; font: 10pt 'Segoe UI';\")\n        desc_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        desc_label.setWordWrap(True)\n        text_layout.addWidget(desc_label)\n        pack_layout.addLayout(text_layout)\n        pack_layout.addStretch()\n        pack_button = QPushButton(\"Optimize\")\n        pack_button.setMinimumSize(100, 40)\n        pack_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font: bold 12pt 'Segoe UI';\n            }}\n            QPushButton:hover {{\n                background-color: {themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        pack_button.clicked.connect(lambda: self.run_single_optimization(option[\"title\"], option_functions))\n        pack_layout.addWidget(pack_button)\n        return frame\n\n    def run_single_optimization(self, title, option_functions):\n        try:\n            print(f\"Running optimization for: {title}\")\n            progress_dialog = QProgressDialog(f\"Running {title}...\", \"Cancel\", 0, 100, self.ui.central_widget)\n            progress_dialog.setWindowTitle(\"Optimization Progress\")\n            progress_dialog.setMinimumSize(500, 150)\n            progress_dialog.setStyleSheet(f\"\"\"\n                QProgressDialog {{\n                    background-color: {self.themes['app_color']['dark_one']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 10px;\n                    font-family: 'Segoe UI';\n                    font-size: 12pt;\n                }}\n                QProgressBar {{\n                    background-color: {self.themes['app_color']['dark_two']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 8px;\n                    text-align: center;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-height: 25px;\n                }}\n                QProgressBar::chunk {{\n                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                        stop:0 {self.themes['app_color']['context_color']},\n                        stop:1 {self.themes['app_color']['context_hover']});\n                    border-radius: 6px;\n                    margin: 2px;\n                }}\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 6px;\n                    padding: 8px 16px;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-width: 80px;\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                }}\n                QPushButton:disabled {{\n                    background-color: #555555;\n                    color: #FFFFFF;\n                }}\n                QLabel {{\n                    color: {self.themes['app_color']['text_foreground']};\n                    font-size: 11pt;\n                    font-weight: bold;\n                    padding: 5px;\n                }}\n            \"\"\")\n            progress_dialog.setModal(True)\n            progress_dialog.setAutoClose(False)\n            progress_dialog.setAutoReset(False)\n            optimization_thread = QThread(self.ui.central_widget)\n            optimization_worker = OptimizationWorker([(title, \"Single\")], option_functions)\n            optimization_worker.moveToThread(optimization_thread)\n            optimization_worker.progress_update.connect(lambda value, text: (progress_dialog.setValue(value), progress_dialog.setLabelText(text)))\n            optimization_worker.result_ready.connect(lambda result, success: self.show_optimization_result(result, success, progress_dialog))\n            optimization_thread.started.connect(optimization_worker.run)\n            optimization_worker.finished.connect(progress_dialog.close)\n            optimization_worker.finished.connect(optimization_thread.quit)\n            optimization_worker.finished.connect(optimization_worker.deleteLater)\n            optimization_thread.finished.connect(optimization_thread.deleteLater)\n            progress_dialog.canceled.connect(optimization_worker.stop)\n            progress_dialog.show()\n            optimization_thread.start()\n        except Exception as e:\n            print(f\"Error running {title}: {str(e)}\")\n            show_critical_message(self.ui.central_widget, \"Error\", f\"An error occurred while running {title}: {str(e)}\")\n\n    def show_optimization_result(self, result, success, progress_dialog):\n        progress_dialog.close()\n        msg_box = PyMessageBox(self.ui.central_widget)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        msg_box.setText(result)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def prev_frame(self):\n        self.current_frame_index = (self.current_frame_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def switch_frame(self):\n        self.current_frame_index = (self.current_frame_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def optimize_selected(self):\n        # Placeholder for running multiple optimizations if needed\n        pass\n\n    def setup_gui(self):\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self.ui.central_widget, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self.ui.central_widget, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self.ui.central_widget, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self.ui.central_widget, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self.ui.central_widget, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self.ui.central_widget, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self.ui.central_widget, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self.ui.central_widget, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(self.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(self.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self.ui.central_widget,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = self.create_tab_header(\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\"\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\"\n        )\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except PermissionError:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        except Exception:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n        def clear_chat_ui():\n            AstreisFunc.clear_history()\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        packs_scroll_area = QScrollArea()\n        packs_scroll_area.setWidgetResizable(True)\n        packs_scroll_content = QWidget()\n        packs_scroll_layout = QVBoxLayout(packs_scroll_content)\n        packs_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        packs_scroll_layout.setSpacing(10)\n        packs_scroll_area.setWidget(packs_scroll_content)\n        packs_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        packs_scroll_area.setGraphicsEffect(shadow)\n        packs_scroll_area.setMinimumHeight(300)\n        pack_options = [\n            {\n                \"title\": \"FPS Performance Pack\",\n                \"desc\": \"Optimize for gaming performance\",\n                \"icon\": \"icon_game.svg\"\n            },\n            {\n                \"title\": \"Boost Up PC Pack\",\n                \"desc\": \"Maximize overall PC performance\",\n                \"icon\": \"icon_speed.svg\"\n            },\n            {\n                \"title\": \"Reduce PING Pack\",\n                \"desc\": \"Improve network latency\",\n                \"icon\": \"icon_network.svg\"\n            }\n        ]\n        for option in pack_options:\n            frame = self.create_pack_frame(option, self.themes, self.option_functions)\n            packs_scroll_layout.addWidget(frame)\n        page_3_layout.addWidget(packs_scroll_area, stretch=1)\n        advanced_frame = QFrame()\n        advanced_frame.setStyleSheet(f\"background: transparent;\")\n        advanced_frame.setMinimumSize(0, 60)\n        advanced_layout = QHBoxLayout(advanced_frame)\n        advanced_layout.setContentsMargins(10, 5, 10, 5)\n        advanced_layout.setAlignment(QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 40)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background: transparent;\n                color: #FFFFFF;\n                border: none;\n                font: bold 14pt 'Segoe UI';\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                color: {self.themes['app_color']['context_hover']};\n            }}\n            QPushButton:pressed {{\n                color: {self.themes['app_color']['context_pressed']};\n            }}\n        \"\"\")\n        def slide_to_page_4():\n            anim = QPropertyAnimation(self.ui.load_pages.page_4, b\"geometry\")\n            anim.setEasingCurve(QEasingCurve.InOutQuad)\n            anim.setDuration(500)\n            start_rect = self.ui.load_pages.page_4.geometry()\n            start_rect.moveTop(self.ui.central_widget.height())\n            end_rect = self.ui.load_pages.page_4.geometry()\n            end_rect.moveTop(0)\n            anim.setStartValue(start_rect)\n            anim.setEndValue(end_rect)\n            anim.start()\n            MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_4)\n        show_advanced_button.clicked.connect(slide_to_page_4)\n        advanced_layout.addWidget(show_advanced_button)\n        page_3_layout.addWidget(advanced_frame, alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize CPU Performance\",\n                \"desc\": \"Maximize CPU scheduling and disable power management\",\n                \"warn\": \"⚠️Overheating Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Background Apps\",\n                \"desc\": \"Stop all background apps to free system resources\",\n                \"warn\": \"⚠️May Break Apps\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Update\",\n                \"desc\": \"Disable automatic updates to prevent interruptions\",\n                \"warn\": \"⚠️Updates will not be installed automatically\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Automatic Restart\",\n                \"desc\": \"Prevent automatic restart after crashes or errors\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Sleep Mode\",\n                \"desc\": \"Disable sleep mode to keep the computer awake\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Defender\",\n                \"desc\": \"Disable Windows Defender to reduce CPU and disk usage\",\n                \"warn\": \"⚠️High Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean System Logs\",\n                \"desc\": \"Remove system logs to free up space\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            },\n            {\n                \"title\": \"Run Disk Cleanup\",\n                \"desc\": \"Perform disk cleanup to optimize storage\",\n                \"warn\": \"Recommended once a week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Run Debloat Utility\",\n                \"desc\": \"Run Windows Debloat Utility @Raphire\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"Recommended once a Week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Enable TCP Fast Open\",\n                \"desc\": \"Improve network performance by enabling TCP Fast Open\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Microsoft Store Cache\",\n                \"desc\": \"Clears cached files from the Microsoft Store\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Event Logs\",\n                \"desc\": \"Clear event logs to improve internet performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable IPv6\",\n                \"desc\": \"Disable IPv6 protocol for improved performance\",\n                \"warn\": \"⚠️Be Cautious\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Firewall\",\n                \"desc\": \"Disables Firewall\",\n                \"warn\": \"⚠️Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Wifi Speed Test\",\n                \"desc\": \"Test your WiFi speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize All\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(self.optimize_selected)\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ]
            },
            "createdAt": 1751195927803,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "ok so the optimize button next to each frame just run 1 command like run_fps_pack() simple function and 2nd make it easy to add like this easy addable in the page 4: Performance_Frames = [ { \"title\": \"Max FPS PACK\", \"desc\": \"Improves FPS\", \"warn\": \"⚠️ Heat\", \"desc_color\": \"default\", \"warn_color\": \"yellow\", \"command\": AstreisFunc.maxfps() } ]"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "1d3e02be-4a90-4d0c-a1e8-7d01f23bd726",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "To implement the functionality you described, you need to make a few modifications to your existing code. Here's a step-by-step guide to achieve this:\n\n1. **Define the `Performance_Frames` List:**\n\n   You can define a list of dictionaries, where each dictionary represents a performance frame with its properties and the command to execute. This list can be defined in your `setup_main_window.py` file or another configuration file.\n\n   ```python\n   Performance_Frames = [\n       {\n           \"title\": \"Max FPS PACK\",\n           \"desc\": \"Improves FPS\",\n           \"warn\": \"⚠️ Heat\",\n           \"desc_color\": \"default\",\n           \"warn_color\": \"yellow\",\n           \"command\": AstreisFunc.maxfps\n       }\n       # Add more frames as needed\n   ]\n   ```\n\n2. **Modify the `create_pack_frame` Method:**\n\n   Update the `create_pack_frame` method to accept the `command` from the `Performance_Frames` list and connect it to the button's click event.\n\n   ```python\n   def create_pack_frame(self, option, themes):\n       frame = QFrame()\n       frame.setStyleSheet(f\"background-color: {themes['app_color']['dark_three']}; border-radius: 10px;\")\n       frame.setMinimumHeight(100)\n       pack_layout = QHBoxLayout(frame)\n       pack_layout.setContentsMargins(10, 5, 10, 5)\n       \n       icon_label = QLabel()\n       icon_label.setMinimumSize(32, 32)\n       icon_label.setPixmap(QtGui.QPixmap(Functions.set_svg_icon(option.get(\"icon\", \"\"))).scaled(32, 32, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n       icon_label.setAlignment(QtCore.Qt.AlignCenter)\n       pack_layout.addWidget(icon_label)\n       \n       text_layout = QVBoxLayout()\n       title_label = QLabel(option[\"title\"])\n       title_label.setStyleSheet(f\"color: {themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n       title_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n       text_layout.addWidget(title_label)\n       \n       desc_label = QLabel(option[\"desc\"])\n       desc_label.setStyleSheet(f\"color: {themes['app_color']['text_description']}; font: 10pt 'Segoe UI';\")\n       desc_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n       desc_label.setWordWrap(True)\n       text_layout.addWidget(desc_label)\n       \n       pack_layout.addLayout(text_layout)\n       pack_layout.addStretch()\n       \n       pack_button = QPushButton(\"Optimize\")\n       pack_button.setMinimumSize(100, 40)\n       pack_button.setStyleSheet(f\"\"\"\n           QPushButton {{\n               background-color: {themes['app_color']['context_color']};\n               color: #FFFFFF;\n               border: none;\n               border-radius: 8px;\n               font: bold 12pt 'Segoe UI';\n           }}\n           QPushButton:hover {{\n               background-color: {themes['app_color']['context_hover']};\n               color: #FFFFFF;\n           }}\n           QPushButton:pressed {{\n               background-color: {themes['app_color']['context_pressed']};\n               color: #FFFFFF;\n           }}\n       \"\"\")\n       pack_button.clicked.connect(option[\"command\"])\n       pack_layout.addWidget(pack_button)\n       \n       return frame\n   ```\n\n3. **Integrate the Frames into the GUI:**\n\n   In your `setup_gui` method or wherever you are setting up the frames, iterate over the `Performance_Frames` list and create frames using the `create_pack_frame` method.\n\n   ```python\n   def setup_gui(self):\n       # Existing setup code...\n       \n       for frame_option in Performance_Frames:\n           frame = self.create_pack_frame(frame_option, self.themes)\n           self.scroll_layout.addWidget(frame)\n       \n       # Continue with the rest of the setup...\n   ```\n\nThis setup will allow you to easily add new performance frames by simply appending new dictionaries to the `Performance_Frames` list. Each frame will have an \"Optimize\" button that, when clicked, will execute the corresponding command function."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nfrom optimization_worker import OptimizationWorker\nimport sys\nimport os\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\n\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        super().__init__(parent)\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        super().__init__()\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\nclass SetupMainWindow:\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    def __init__(self, ui, option_functions):\n        self.ui = ui\n        self.settings = Settings().items\n        self.themes = Themes().items\n        self.option_functions = option_functions\n        self.current_frame_index = 0\n\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def create_pack_frame(self, option, themes, option_functions):\n        frame = QFrame()\n        frame.setStyleSheet(f\"background-color: {themes['app_color']['dark_three']}; border-radius: 10px;\")\n        frame.setMinimumHeight(100)\n        pack_layout = QHBoxLayout(frame)\n        pack_layout.setContentsMargins(10, 5, 10, 5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(32, 32)\n        icon_path = Functions.set_svg_icon(option[\"icon\"])\n        if os.path.exists(icon_path):\n            icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(32, 32, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        else:\n            print(f\"Icon not found: {icon_path}\")\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        pack_layout.addWidget(icon_label)\n        text_layout = QVBoxLayout()\n        title_label = QLabel(option[\"title\"])\n        title_label.setStyleSheet(f\"color: {themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n        title_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        text_layout.addWidget(title_label)\n        desc_label = QLabel(option[\"desc\"])\n        desc_label.setStyleSheet(f\"color: {themes['app_color']['text_description']}; font: 10pt 'Segoe UI';\")\n        desc_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        desc_label.setWordWrap(True)\n        text_layout.addWidget(desc_label)\n        pack_layout.addLayout(text_layout)\n        pack_layout.addStretch()\n        pack_button = QPushButton(\"Optimize\")\n        pack_button.setMinimumSize(100, 40)\n        pack_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font: bold 12pt 'Segoe UI';\n            }}\n            QPushButton:hover {{\n                background-color: {themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        pack_button.clicked.connect(lambda: self.run_single_optimization(option[\"title\"], option_functions))\n        pack_layout.addWidget(pack_button)\n        return frame\n\n    def run_single_optimization(self, title, option_functions):\n        try:\n            print(f\"Running optimization for: {title}\")\n            progress_dialog = QProgressDialog(f\"Running {title}...\", \"Cancel\", 0, 100, self.ui.central_widget)\n            progress_dialog.setWindowTitle(\"Optimization Progress\")\n            progress_dialog.setMinimumSize(500, 150)\n            progress_dialog.setStyleSheet(f\"\"\"\n                QProgressDialog {{\n                    background-color: {self.themes['app_color']['dark_one']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 10px;\n                    font-family: 'Segoe UI';\n                    font-size: 12pt;\n                }}\n                QProgressBar {{\n                    background-color: {self.themes['app_color']['dark_two']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 8px;\n                    text-align: center;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-height: 25px;\n                }}\n                QProgressBar::chunk {{\n                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                        stop:0 {self.themes['app_color']['context_color']},\n                        stop:1 {self.themes['app_color']['context_hover']});\n                    border-radius: 6px;\n                    margin: 2px;\n                }}\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 6px;\n                    padding: 8px 16px;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-width: 80px;\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                }}\n                QPushButton:disabled {{\n                    background-color: #555555;\n                    color: #FFFFFF;\n                }}\n                QLabel {{\n                    color: {self.themes['app_color']['text_foreground']};\n                    font-size: 11pt;\n                    font-weight: bold;\n                    padding: 5px;\n                }}\n            \"\"\")\n            progress_dialog.setModal(True)\n            progress_dialog.setAutoClose(False)\n            progress_dialog.setAutoReset(False)\n            optimization_thread = QThread(self.ui.central_widget)\n            optimization_worker = OptimizationWorker([(title, \"Single\")], option_functions)\n            optimization_worker.moveToThread(optimization_thread)\n            optimization_worker.progress_update.connect(lambda value, text: (progress_dialog.setValue(value), progress_dialog.setLabelText(text)))\n            optimization_worker.result_ready.connect(lambda result, success: self.show_optimization_result(result, success, progress_dialog))\n            optimization_thread.started.connect(optimization_worker.run)\n            optimization_worker.finished.connect(progress_dialog.close)\n            optimization_worker.finished.connect(optimization_thread.quit)\n            optimization_worker.finished.connect(optimization_worker.deleteLater)\n            optimization_thread.finished.connect(optimization_thread.deleteLater)\n            progress_dialog.canceled.connect(optimization_worker.stop)\n            progress_dialog.show()\n            optimization_thread.start()\n        except Exception as e:\n            print(f\"Error running {title}: {str(e)}\")\n            show_critical_message(self.ui.central_widget, \"Error\", f\"An error occurred while running {title}: {str(e)}\")\n\n    def show_optimization_result(self, result, success, progress_dialog):\n        progress_dialog.close()\n        msg_box = PyMessageBox(self.ui.central_widget)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        msg_box.setText(result)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def prev_frame(self):\n        self.current_frame_index = (self.current_frame_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def switch_frame(self):\n        self.current_frame_index = (self.current_frame_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def optimize_selected(self):\n        # Placeholder for running multiple optimizations if needed\n        pass\n\n    def setup_gui(self):\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self.ui.central_widget, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self.ui.central_widget, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self.ui.central_widget, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self.ui.central_widget, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self.ui.central_widget, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self.ui.central_widget, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self.ui.central_widget, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self.ui.central_widget, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(self.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(self.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self.ui.central_widget,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = self.create_tab_header(\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\"\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\"\n        )\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except PermissionError:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        except Exception:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n        def clear_chat_ui():\n            AstreisFunc.clear_history()\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        packs_scroll_area = QScrollArea()\n        packs_scroll_area.setWidgetResizable(True)\n        packs_scroll_content = QWidget()\n        packs_scroll_layout = QVBoxLayout(packs_scroll_content)\n        packs_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        packs_scroll_layout.setSpacing(10)\n        packs_scroll_area.setWidget(packs_scroll_content)\n        packs_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        packs_scroll_area.setGraphicsEffect(shadow)\n        packs_scroll_area.setMinimumHeight(300)\n        pack_options = [\n            {\n                \"title\": \"FPS Performance Pack\",\n                \"desc\": \"Optimize for gaming performance\",\n                \"icon\": \"icon_game.svg\"\n            },\n            {\n                \"title\": \"Boost Up PC Pack\",\n                \"desc\": \"Maximize overall PC performance\",\n                \"icon\": \"icon_speed.svg\"\n            },\n            {\n                \"title\": \"Reduce PING Pack\",\n                \"desc\": \"Improve network latency\",\n                \"icon\": \"icon_network.svg\"\n            }\n        ]\n        for option in pack_options:\n            frame = self.create_pack_frame(option, self.themes, self.option_functions)\n            packs_scroll_layout.addWidget(frame)\n        page_3_layout.addWidget(packs_scroll_area, stretch=1)\n        advanced_frame = QFrame()\n        advanced_frame.setStyleSheet(f\"background: transparent;\")\n        advanced_frame.setMinimumSize(0, 60)\n        advanced_layout = QHBoxLayout(advanced_frame)\n        advanced_layout.setContentsMargins(10, 5, 10, 5)\n        advanced_layout.setAlignment(QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 40)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background: transparent;\n                color: #FFFFFF;\n                border: none;\n                font: bold 14pt 'Segoe UI';\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                color: {self.themes['app_color']['context_hover']};\n            }}\n            QPushButton:pressed {{\n                color: {self.themes['app_color']['context_pressed']};\n            }}\n        \"\"\")\n        def slide_to_page_4():\n            anim = QPropertyAnimation(self.ui.load_pages.page_4, b\"geometry\")\n            anim.setEasingCurve(QEasingCurve.InOutQuad)\n            anim.setDuration(500)\n            start_rect = self.ui.load_pages.page_4.geometry()\n            start_rect.moveTop(self.ui.central_widget.height())\n            end_rect = self.ui.load_pages.page_4.geometry()\n            end_rect.moveTop(0)\n            anim.setStartValue(start_rect)\n            anim.setEndValue(end_rect)\n            anim.start()\n            MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_4)\n        show_advanced_button.clicked.connect(slide_to_page_4)\n        advanced_layout.addWidget(show_advanced_button)\n        page_3_layout.addWidget(advanced_frame, alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize CPU Performance\",\n                \"desc\": \"Maximize CPU scheduling and disable power management\",\n                \"warn\": \"⚠️Overheating Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Background Apps\",\n                \"desc\": \"Stop all background apps to free system resources\",\n                \"warn\": \"⚠️May Break Apps\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Update\",\n                \"desc\": \"Disable automatic updates to prevent interruptions\",\n                \"warn\": \"⚠️Updates will not be installed automatically\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Automatic Restart\",\n                \"desc\": \"Prevent automatic restart after crashes or errors\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Sleep Mode\",\n                \"desc\": \"Disable sleep mode to keep the computer awake\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Defender\",\n                \"desc\": \"Disable Windows Defender to reduce CPU and disk usage\",\n                \"warn\": \"⚠️High Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean System Logs\",\n                \"desc\": \"Remove system logs to free up space\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            },\n            {\n                \"title\": \"Run Disk Cleanup\",\n                \"desc\": \"Perform disk cleanup to optimize storage\",\n                \"warn\": \"Recommended once a week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Run Debloat Utility\",\n                \"desc\": \"Run Windows Debloat Utility @Raphire\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"Recommended once a Week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Enable TCP Fast Open\",\n                \"desc\": \"Improve network performance by enabling TCP Fast Open\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Microsoft Store Cache\",\n                \"desc\": \"Clears cached files from the Microsoft Store\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Event Logs\",\n                \"desc\": \"Clear event logs to improve internet performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable IPv6\",\n                \"desc\": \"Disable IPv6 protocol for improved performance\",\n                \"warn\": \"⚠️Be Cautious\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Firewall\",\n                \"desc\": \"Disables Firewall\",\n                \"warn\": \"⚠️Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Wifi Speed Test\",\n                \"desc\": \"Test your WiFi speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize All\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(self.optimize_selected)\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "AstreisFunc/__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\AstreisFunc\\__init__.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\widgets\\py_title_bar.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\widgets\\py_title_bar.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "settings.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\settings.json",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\top_level.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\top_level.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\entry_points.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\entry_points.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\SOURCES.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\SOURCES.txt",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\functions.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\functions.py",
                        "sources": []
                    },
                    {
                        "path": "AstreisFunc\\__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\AstreisFunc\\__init__.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\ui_main_pages.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\ui_main_pages.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "gui\\uis\\windows\\main_window\\setup_main_window.py"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nfrom optimization_worker import OptimizationWorker\nimport sys\nimport os\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\n\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        super().__init__(parent)\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        super().__init__()\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\nclass SetupMainWindow:\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    def __init__(self, ui, option_functions):\n        self.ui = ui\n        self.settings = Settings().items\n        self.themes = Themes().items\n        self.option_functions = option_functions\n        self.current_frame_index = 0\n\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def create_pack_frame(self, option, themes, option_functions):\n        frame = QFrame()\n        frame.setStyleSheet(f\"background-color: {themes['app_color']['dark_three']}; border-radius: 10px;\")\n        frame.setMinimumHeight(100)\n        pack_layout = QHBoxLayout(frame)\n        pack_layout.setContentsMargins(10, 5, 10, 5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(32, 32)\n        icon_path = Functions.set_svg_icon(option[\"icon\"])\n        if os.path.exists(icon_path):\n            icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(32, 32, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        else:\n            print(f\"Icon not found: {icon_path}\")\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        pack_layout.addWidget(icon_label)\n        text_layout = QVBoxLayout()\n        title_label = QLabel(option[\"title\"])\n        title_label.setStyleSheet(f\"color: {themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n        title_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        text_layout.addWidget(title_label)\n        desc_label = QLabel(option[\"desc\"])\n        desc_label.setStyleSheet(f\"color: {themes['app_color']['text_description']}; font: 10pt 'Segoe UI';\")\n        desc_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n        desc_label.setWordWrap(True)\n        text_layout.addWidget(desc_label)\n        pack_layout.addLayout(text_layout)\n        pack_layout.addStretch()\n        pack_button = QPushButton(\"Optimize\")\n        pack_button.setMinimumSize(100, 40)\n        pack_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font: bold 12pt 'Segoe UI';\n            }}\n            QPushButton:hover {{\n                background-color: {themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        pack_button.clicked.connect(lambda: self.run_single_optimization(option[\"title\"], option_functions))\n        pack_layout.addWidget(pack_button)\n        return frame\n\n    def run_single_optimization(self, title, option_functions):\n        try:\n            print(f\"Running optimization for: {title}\")\n            progress_dialog = QProgressDialog(f\"Running {title}...\", \"Cancel\", 0, 100, self.ui.central_widget)\n            progress_dialog.setWindowTitle(\"Optimization Progress\")\n            progress_dialog.setMinimumSize(500, 150)\n            progress_dialog.setStyleSheet(f\"\"\"\n                QProgressDialog {{\n                    background-color: {self.themes['app_color']['dark_one']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 10px;\n                    font-family: 'Segoe UI';\n                    font-size: 12pt;\n                }}\n                QProgressBar {{\n                    background-color: {self.themes['app_color']['dark_two']};\n                    color: {self.themes['app_color']['text_foreground']};\n                    border: 2px solid {self.themes['app_color']['context_color']};\n                    border-radius: 8px;\n                    text-align: center;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-height: 25px;\n                }}\n                QProgressBar::chunk {{\n                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                        stop:0 {self.themes['app_color']['context_color']},\n                        stop:1 {self.themes['app_color']['context_hover']});\n                    border-radius: 6px;\n                    margin: 2px;\n                }}\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 6px;\n                    padding: 8px 16px;\n                    font-weight: bold;\n                    font-size: 11pt;\n                    min-width: 80px;\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                }}\n                QPushButton:disabled {{\n                    background-color: #555555;\n                    color: #FFFFFF;\n                }}\n                QLabel {{\n                    color: {self.themes['app_color']['text_foreground']};\n                    font-size: 11pt;\n                    font-weight: bold;\n                    padding: 5px;\n                }}\n            \"\"\")\n            progress_dialog.setModal(True)\n            progress_dialog.setAutoClose(False)\n            progress_dialog.setAutoReset(False)\n            optimization_thread = QThread(self.ui.central_widget)\n            optimization_worker = OptimizationWorker([(title, \"Single\")], option_functions)\n            optimization_worker.moveToThread(optimization_thread)\n            optimization_worker.progress_update.connect(lambda value, text: (progress_dialog.setValue(value), progress_dialog.setLabelText(text)))\n            optimization_worker.result_ready.connect(lambda result, success: self.show_optimization_result(result, success, progress_dialog))\n            optimization_thread.started.connect(optimization_worker.run)\n            optimization_worker.finished.connect(progress_dialog.close)\n            optimization_worker.finished.connect(optimization_thread.quit)\n            optimization_worker.finished.connect(optimization_worker.deleteLater)\n            optimization_thread.finished.connect(optimization_thread.deleteLater)\n            progress_dialog.canceled.connect(optimization_worker.stop)\n            progress_dialog.show()\n            optimization_thread.start()\n        except Exception as e:\n            print(f\"Error running {title}: {str(e)}\")\n            show_critical_message(self.ui.central_widget, \"Error\", f\"An error occurred while running {title}: {str(e)}\")\n\n    def show_optimization_result(self, result, success, progress_dialog):\n        progress_dialog.close()\n        msg_box = PyMessageBox(self.ui.central_widget)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        msg_box.setText(result)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def prev_frame(self):\n        self.current_frame_index = (self.current_frame_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def switch_frame(self):\n        self.current_frame_index = (self.current_frame_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(self.current_frame_index)\n\n    def optimize_selected(self):\n        # Placeholder for running multiple optimizations if needed\n        pass\n\n    def setup_gui(self):\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self.ui.central_widget, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self.ui.central_widget, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self.ui.central_widget, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self.ui.central_widget, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self.ui.central_widget, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self.ui.central_widget, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self.ui.central_widget, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self.ui.central_widget, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(self.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(self.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self.ui.central_widget,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = self.create_tab_header(\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\"\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\"\n        )\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except PermissionError:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n        )\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        except Exception:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\"\n            )\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\"\n        )\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n        def clear_chat_ui():\n            AstreisFunc.clear_history()\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        packs_scroll_area = QScrollArea()\n        packs_scroll_area.setWidgetResizable(True)\n        packs_scroll_content = QWidget()\n        packs_scroll_layout = QVBoxLayout(packs_scroll_content)\n        packs_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        packs_scroll_layout.setSpacing(10)\n        packs_scroll_area.setWidget(packs_scroll_content)\n        packs_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        packs_scroll_area.setGraphicsEffect(shadow)\n        packs_scroll_area.setMinimumHeight(300)\n        pack_options = [\n            {\n                \"title\": \"FPS Performance Pack\",\n                \"desc\": \"Optimize for gaming performance\",\n                \"icon\": \"icon_game.svg\"\n            },\n            {\n                \"title\": \"Boost Up PC Pack\",\n                \"desc\": \"Maximize overall PC performance\",\n                \"icon\": \"icon_speed.svg\"\n            },\n            {\n                \"title\": \"Reduce PING Pack\",\n                \"desc\": \"Improve network latency\",\n                \"icon\": \"icon_network.svg\"\n            }\n        ]\n        for option in pack_options:\n            frame = self.create_pack_frame(option, self.themes, self.option_functions)\n            packs_scroll_layout.addWidget(frame)\n        page_3_layout.addWidget(packs_scroll_area, stretch=1)\n        advanced_frame = QFrame()\n        advanced_frame.setStyleSheet(f\"background: transparent;\")\n        advanced_frame.setMinimumSize(0, 60)\n        advanced_layout = QHBoxLayout(advanced_frame)\n        advanced_layout.setContentsMargins(10, 5, 10, 5)\n        advanced_layout.setAlignment(QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 40)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background: transparent;\n                color: #FFFFFF;\n                border: none;\n                font: bold 14pt 'Segoe UI';\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                color: {self.themes['app_color']['context_hover']};\n            }}\n            QPushButton:pressed {{\n                color: {self.themes['app_color']['context_pressed']};\n            }}\n        \"\"\")\n        def slide_to_page_4():\n            anim = QPropertyAnimation(self.ui.load_pages.page_4, b\"geometry\")\n            anim.setEasingCurve(QEasingCurve.InOutQuad)\n            anim.setDuration(500)\n            start_rect = self.ui.load_pages.page_4.geometry()\n            start_rect.moveTop(self.ui.central_widget.height())\n            end_rect = self.ui.load_pages.page_4.geometry()\n            end_rect.moveTop(0)\n            anim.setStartValue(start_rect)\n            anim.setEndValue(end_rect)\n            anim.start()\n            MainFunctions.set_page(self.ui.central_widget, self.ui.load_pages.page_4)\n        show_advanced_button.clicked.connect(slide_to_page_4)\n        advanced_layout.addWidget(show_advanced_button)\n        page_3_layout.addWidget(advanced_frame, alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self.ui.central_widget,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize CPU Performance\",\n                \"desc\": \"Maximize CPU scheduling and disable power management\",\n                \"warn\": \"⚠️Overheating Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Background Apps\",\n                \"desc\": \"Stop all background apps to free system resources\",\n                \"warn\": \"⚠️May Break Apps\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Update\",\n                \"desc\": \"Disable automatic updates to prevent interruptions\",\n                \"warn\": \"⚠️Updates will not be installed automatically\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Automatic Restart\",\n                \"desc\": \"Prevent automatic restart after crashes or errors\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Sleep Mode\",\n                \"desc\": \"Disable sleep mode to keep the computer awake\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Windows Defender\",\n                \"desc\": \"Disable Windows Defender to reduce CPU and disk usage\",\n                \"warn\": \"⚠️High Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean System Logs\",\n                \"desc\": \"Remove system logs to free up space\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            },\n            {\n                \"title\": \"Run Disk Cleanup\",\n                \"desc\": \"Perform disk cleanup to optimize storage\",\n                \"warn\": \"Recommended once a week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Run Debloat Utility\",\n                \"desc\": \"Run Windows Debloat Utility @Raphire\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"red\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"Recommended once a Week\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Enable TCP Fast Open\",\n                \"desc\": \"Improve network performance by enabling TCP Fast Open\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Microsoft Store Cache\",\n                \"desc\": \"Clears cached files from the Microsoft Store\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clear Event Logs\",\n                \"desc\": \"Clear event logs to improve internet performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable IPv6\",\n                \"desc\": \"Disable IPv6 protocol for improved performance\",\n                \"warn\": \"⚠️Be Cautious\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Firewall\",\n                \"desc\": \"Disables Firewall\",\n                \"warn\": \"⚠️Security Risk\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Wifi Speed Test\",\n                \"desc\": \"Test your WiFi speed\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if option.get(\"desc_color\", \"\").lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if option.get(\"warn\"):\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                elif option.get(\"warn_color\", \"\").lower() == \"red\":\n                    warn_color = self.themes['app_color']['red']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            optimize_button = QPushButton(\"Optimize\")\n            optimize_button.setMinimumSize(100, 40)\n            optimize_button.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {self.themes['app_color']['context_color']};\n                    color: #FFFFFF;\n                    border: none;\n                    border-radius: 8px;\n                    font: bold 12pt 'Segoe UI';\n                }}\n                QPushButton:hover {{\n                    background-color: {self.themes['app_color']['context_hover']};\n                    color: #FFFFFF;\n                }}\n                QPushButton:pressed {{\n                    background-color: {self.themes['app_color']['context_pressed']};\n                    color: #FFFFFF;\n                }}\n            \"\"\")\n            optimize_button.clicked.connect(lambda _, t=option[\"title\"]: self.run_single_optimization(t, self.option_functions))\n            inner_layout.addWidget(optimize_button, alignment=QtCore.Qt.AlignRight)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize All\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes['app_color']['context_color']};\n                color: #FFFFFF;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes['app_color']['context_hover']};\n                color: #FFFFFF;\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes['app_color']['context_pressed']};\n                color: #FFFFFF;\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(self.optimize_selected)\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ]
            },
            "createdAt": 1751195943126,
            "isInternal": false
        }
    ],
    "isAgent": false,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}