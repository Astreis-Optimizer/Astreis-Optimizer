{
    "checksum": "9f3ee66795e477d4890c15bf6b65440a8a788e796f48f34f9a936eae736a14a2",
    "data": {
    "id": "56ef9c33-b406-4a66-a296-3d909d6cb445",
    "createdAt": 1751031502876,
    "updatedAt": 1751034563177,
    "title": "PC Cleaning Options Update",
    "messages": [
        {
            "id": "65f9cba4-c22c-4be5-aefd-db52c9926624",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "so add in clean_pc_options: clean system logs, run disk cleanup, run debloat utility"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "gui\\widgets\\py_grips\\__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\widgets\\py_grips\\__init__.py",
                        "sources": []
                    },
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\top_level.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\top_level.txt",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\themes\\themes.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\themes\\themes.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\bright_theme.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\bright_theme.json",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                    }
                ]
            },
            "createdAt": 1751031526471,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "so add in clean_pc_options: clean system logs, run disk cleanup, run debloat utility"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "b60c0101-7a70-4e71-b90d-70e8cb3e69f5",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "To add the options \"clean system logs,\" \"run disk cleanup,\" and \"run debloat utility\" to the `clean_pc_options`, you will need to locate where `clean_pc_options` is defined and modify it to include these new options. Since the provided code snippet does not show the definition of `clean_pc_options`, I'll guide you on how you might typically add these options.\n\nAssuming `clean_pc_options` is a list or a similar data structure, you can add the new options like this:\n\n```python\n# Assuming clean_pc_options is a list\nclean_pc_options = [\n    \"clean system logs\",\n    \"run disk cleanup\",\n    \"run debloat utility\"\n]\n```\n\nIf `clean_pc_options` is defined elsewhere in your project, you will need to find its definition and modify it accordingly. If you need further assistance, please provide the part of the code where `clean_pc_options` is defined or used."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "gui\\widgets\\py_grips\\__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\widgets\\py_grips\\__init__.py",
                        "sources": []
                    },
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\top_level.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\top_level.txt",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\themes\\themes.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\themes\\themes.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\bright_theme.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\bright_theme.json",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                    }
                ]
            },
            "createdAt": 1751031533703,
            "isInternal": false
        },
        {
            "id": "0004d3bc-a04c-4021-824e-9144ca00f9f2",
            "role": "user",
            "content": [
                {
                    "type": "codeSnippet",
                    "text": "clean_pc_options = [\n    {\n        \"title\": \"Clear Temporary Files\",\n        \"desc\": \"Remove temporary files to free up disk space\",\n        \"warn\": \"Recommended Once A Week!\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"green\"\n    },\n    {\n        \"title\": \"Clean Recycle Bin\",\n        \"desc\": \"Cleans/Empties Recycle Bin\",\n        \"warn\": \"⚠️Check Recycle Bin\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"yellow\"\n    },\n    {\n        \"title\": \"Clean Browser Cache\",\n        \"desc\": \"Cleans Browser Cache and History\",\n        \"warn\": \"\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"yellow\"\n    }\n]\nadd"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\ui_main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\ui_main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "AstreisFunc\\__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\AstreisFunc\\__init__.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\widgets\\py_window\\styles.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\widgets\\py_window\\styles.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\bright_theme.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\bright_theme.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\default.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\default.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\themes\\themes.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\themes\\themes.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\dracula.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\dracula.json",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\json_settings.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\json_settings.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\json_themes.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\json_themes.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\functions.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\functions.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                    }
                ]
            },
            "createdAt": 1751031549663,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "codeBlock",
                        "attrs": {
                            "language": null
                        },
                        "content": [
                            {
                                "type": "text",
                                "text": "clean_pc_options = [\n    {\n        \"title\": \"Clear Temporary Files\",\n        \"desc\": \"Remove temporary files to free up disk space\",\n        \"warn\": \"Recommended Once A Week!\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"green\"\n    },\n    {\n        \"title\": \"Clean Recycle Bin\",\n        \"desc\": \"Cleans/Empties Recycle Bin\",\n        \"warn\": \"⚠️Check Recycle Bin\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"yellow\"\n    },\n    {\n        \"title\": \"Clean Browser Cache\",\n        \"desc\": \"Cleans Browser Cache and History\",\n        \"warn\": \"\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"yellow\"\n    }\n]\nadd"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "a7a35427-14c7-4a21-8c0d-e2257961e79e",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "To add the new options \"clean system logs,\" \"run disk cleanup,\" and \"run debloat utility\" to the `clean_pc_options` list, you can extend the list with new dictionary entries for each option. Here's how you can modify the existing list to include these new options:\n\n```python\nclean_pc_options = [\n    {\n        \"title\": \"Clear Temporary Files\",\n        \"desc\": \"Remove temporary files to free up disk space\",\n        \"warn\": \"Recommended Once A Week!\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"green\"\n    },\n    {\n        \"title\": \"Clean Recycle Bin\",\n        \"desc\": \"Cleans/Empties Recycle Bin\",\n        \"warn\": \"⚠️Check Recycle Bin\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"yellow\"\n    },\n    {\n        \"title\": \"Clean Browser Cache\",\n        \"desc\": \"Cleans Browser Cache and History\",\n        \"warn\": \"\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"yellow\"\n    },\n    {\n        \"title\": \"Clean System Logs\",\n        \"desc\": \"Remove system logs to free up space\",\n        \"warn\": \"Ensure no important logs are needed\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"red\"\n    },\n    {\n        \"title\": \"Run Disk Cleanup\",\n        \"desc\": \"Perform disk cleanup to optimize storage\",\n        \"warn\": \"May take some time\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"orange\"\n    },\n    {\n        \"title\": \"Run Debloat Utility\",\n        \"desc\": \"Remove unnecessary applications and files\",\n        \"warn\": \"Review items before removal\",\n        \"desc_color\": \"default\",\n        \"warn_color\": \"red\"\n    }\n]\n```\n\nEach new option is added as a dictionary with keys for `title`, `desc`, `warn`, `desc_color`, and `warn_color`. Adjust the `warn` and `warn_color` fields as needed to match the importance and urgency of each task."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\ui_main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\ui_main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "AstreisFunc\\__init__.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\AstreisFunc\\__init__.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\widgets\\py_window\\styles.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\widgets\\py_window\\styles.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\bright_theme.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\bright_theme.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\default.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\default.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\themes\\themes.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\themes\\themes.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\themes\\dracula.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\themes\\dracula.json",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\json_settings.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\json_settings.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\json_themes.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\json_themes.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\functions.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\functions.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\functions_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "from PySide6 import QtCore, QtGui, QtWidgets\nfrom gui.widgets.py_table_widget.py_table_widget import PyTableWidget\nfrom .functions_main_window import *\nimport sys\nimport os\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.widgets import *\nfrom .ui_main import UI_MainWindow\nimport psutil\nimport platform\nimport cpuinfo\nimport wmi\nfrom .AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import show_info_message\n\n# =============================================================================\n# TOOLTIP WIDGET CLASS\n# =============================================================================\nclass _ToolTip(QWidget):\n    style_tooltip = \"\"\" \n    QLabel {{\t\t\n        background-color: {_dark_one};\t\n        color: {_text_foreground};\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 17px;\n        border: 0px solid transparent;\n        font: 800 9pt \"Segoe UI\";\n    }}\n    \"\"\"\n\n    def __init__(self, parent, tooltip, dark_one, text_foreground):\n        style = self.style_tooltip.format(_dark_one=dark_one, _text_foreground=text_foreground)\n        self.setObjectName(\"label_tooltip\")\n        self.setStyleSheet(style)\n        self.setMinimumHeight(34)\n        self.setParent(parent)\n        self.setText(tooltip)\n        self.adjustSize()\n        self.shadow = QGraphicsDropShadowEffect(self)\n        self.shadow.setBlurRadius(30)\n        self.shadow.setXOffset(0)\n        self.shadow.setYOffset(0)\n        self.shadow.setColor(QtGui.QColor(0, 0, 0, 80))\n        self.setGraphicsEffect(self.shadow)\n\n# =============================================================================\n# CUSTOM TOGGLE WIDGET CLASS\n# =============================================================================\nclass PyToggle(QCheckBox):\n    def __init__(\n            self,\n            width=50,\n            bg_color=\"#777\",\n            circle_color=\"#DDD\",\n            active_color=\"#00BCFF\",\n            animation_curve=QEasingCurve.OutBounce\n    ):\n        QCheckBox.__init__(self)\n        self.setFixedSize(width, 28)\n        self.setCursor(Qt.PointingHandCursor)\n        self._bg_color = bg_color\n        self._circle_color = circle_color\n        self._active_color = active_color\n        self._position = 3\n        self.animation = QPropertyAnimation(self, b\"position\")\n        self.animation.setEasingCurve(animation_curve)\n        self.animation.setDuration(500)\n        self.stateChanged.connect(self.setup_animation)\n\n    @Property(float)\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, pos):\n        self._position = pos\n        self.update()\n\n    def setup_animation(self, value):\n        self.animation.stop()\n        if value:\n            self.animation.setEndValue(self.width() - 26)\n        else:\n            self.animation.setEndValue(4)\n        self.animation.start()\n\n    def hitButton(self, pos: QPoint):\n        return self.contentsRect().contains(pos)\n\n    def paintEvent(self, e):\n        p = QPainter(self)\n        p.setRenderHint(QPainter.Antialiasing)\n        p.setFont(QFont(\"Segoe UI\", 9))\n        p.setPen(Qt.NoPen)\n        rect = QRect(0, 0, self.width(), self.height())\n        if not self.isChecked():\n            p.setBrush(QColor(self._bg_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        else:\n            p.setBrush(QColor(self._active_color))\n            p.drawRoundedRect(0, 0, rect.width(), 28, 14, 14)\n            p.setBrush(QColor(self._circle_color))\n            p.drawEllipse(self._position, 3, 22, 22)\n        p.end()\n\n# =============================================================================\n# MAIN WINDOW SETUP CLASS\n# =============================================================================\nclass SetupMainWindow:\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n\n    # =============================================================================\n    # MENU CONFIGURATION\n    # =============================================================================\n    add_left_menus = [\n        {\n            \"btn_icon\": \"icon_settings.svg\",\n            \"btn_id\": \"btn_settings\",\n            \"btn_text\": \"Settings\",\n            \"btn_tooltip\": \"Open settings\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_info.svg\",\n            \"btn_id\": \"btn_info\",\n            \"btn_text\": \"Information\",\n            \"btn_tooltip\": \"Open informations\",\n            \"show_top\": False,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_home.svg\",\n            \"btn_id\": \"btn_home\",\n            \"btn_text\": \"Home\",\n            \"btn_tooltip\": \"Home page\",\n            \"show_top\": True,\n            \"is_active\": True\n        },\n        {\n            \"btn_icon\": \"icon_chat.svg\",\n            \"btn_id\": \"btn_ai\",\n            \"btn_text\": \"AI Chatbot\",\n            \"btn_tooltip\": \"AI Chatbot page\",\n            \"show_top\": True,\n            \"is_active\": False\n        },\n        {\n            \"btn_icon\": \"icon_power.svg\",\n            \"btn_id\": \"btn_power\",\n            \"btn_text\": \"Optimize PC\",\n            \"btn_tooltip\": \"Open Optimizations\",\n            \"show_top\": True,\n            \"is_active\": False\n        }\n    ]\n\n    add_title_bar_menus = []\n\n    # =============================================================================\n    # UTILITY METHODS\n    # =============================================================================\n    def setup_btns(self):\n        if self.ui.title_bar.sender() is not None:\n            return self.ui.title_bar.sender()\n        elif self.ui.left_menu.sender() is not None:\n            return self.ui.left_menu.sender()\n        elif self.ui.left_column.sender() is not None:\n            return self.ui.left_column.sender()\n\n    def create_tab_header(self, icon_path, title, close_callback=None):\n        themes = self.themes[\"app_color\"]\n        settings = self.settings[\"font\"]\n        frame = QFrame()\n        frame.setMinimumHeight(40)\n        frame.setMaximumHeight(40)\n        frame.setStyleSheet(f\"background-color: {themes['bg_two']}; border-radius: 10px;\")\n        layout = QHBoxLayout(frame)\n        layout.setContentsMargins(8, 0, 8, 0)\n        layout.setSpacing(5)\n        icon_label = QLabel()\n        icon_label.setMinimumSize(24, 24)\n        icon_label.setMaximumSize(24, 24)\n        icon_label.setPixmap(QtGui.QPixmap(icon_path).scaled(24, 24, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n        icon_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(icon_label)\n        layout.addSpacing(5)\n        title_label = QLabel(title)\n        title_label.setStyleSheet(f\"color: {themes['text_title']}; font: {settings['title_size']}pt '{settings['family']}'; background: none;\")\n        title_label.setAlignment(QtCore.Qt.AlignCenter)\n        layout.addWidget(title_label, 1)\n        close_btn = QPushButton()\n        close_btn.setMinimumSize(24, 24)\n        close_btn.setMaximumSize(24, 24)\n        close_btn.setStyleSheet(\"QPushButton {background: transparent; border: none;} QPushButton:hover {background-color: #3c4454; border-radius: 5px;}\")\n        close_btn.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        close_btn.setIconSize(QtCore.QSize(16, 16))\n        close_btn.setToolTip(\"Unlock Premium Features!\")\n        def show_subscription_box():\n            show_info_message(\n                frame,\n                \"Premium Features\",\n                \"<b>Unlock Premium Features!</b><br><br>\"\n                \"Get access to advanced optimization tools and exclusive features with our premium subscription.\"\n            )\n        close_btn.clicked.connect(show_subscription_box)\n        layout.addWidget(close_btn)\n        return frame\n\n    def setup_gui(self):\n        settings = Settings()\n        self.settings = settings.items\n        themes = Themes()\n        self.themes = themes.items\n        self.setWindowTitle(\"Astreis - The All In One PC Optimizer\")\n        if self.settings[\"custom_title_bar\"]:\n            self.setWindowFlag(QtCore.Qt.FramelessWindowHint)\n            self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n            self.ui.title_bar.setStyleSheet(\n                f\"font: bold {self.settings['font']['title_size'] + 8}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']};\"\n            )\n            self.ui.title_bar.set_title(\"Astreis - All In One PC Optimizer\")\n        else:\n            self.ui.title_bar.set_title(\"\")\n        if self.settings[\"custom_title_bar\"]:\n            self.left_grip = PyGrips(self, \"left\", self.hide_grips)\n            self.right_grip = PyGrips(self, \"right\", self.hide_grips)\n            self.top_grip = PyGrips(self, \"top\", self.hide_grips)\n            self.bottom_grip = PyGrips(self, \"bottom\", self.hide_grips)\n            self.top_left_grip = PyGrips(self, \"top_left\", self.hide_grips)\n            self.top_right_grip = PyGrips(self, \"top_right\", self.hide_grips)\n            self.bottom_left_grip = PyGrips(self, \"bottom_left\", self.hide_grips)\n            self.bottom_right_grip = PyGrips(self, \"bottom_right\", self.hide_grips)\n        self.ui.left_menu.add_menus(SetupMainWindow.add_left_menus)\n        self.ui.left_menu.clicked.connect(self.btn_clicked)\n        self.ui.left_menu.released.connect(self.btn_released)\n        self.ui.title_bar.add_menus(SetupMainWindow.add_title_bar_menus)\n        self.ui.title_bar.clicked.connect(self.btn_clicked)\n        self.ui.title_bar.released.connect(self.btn_released)\n        self.ui.left_column.clicked.connect(self.btn_clicked)\n        self.ui.left_column.released.connect(self.btn_released)\n        MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        MainFunctions.set_left_column_menu(\n            self,\n            menu=self.ui.left_column.menus.menu_1,\n            title=\"Astreis Optimizer\",\n            icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n        )\n        self.ui.left_column.menus.menu_1.layout().setAlignment(QtCore.Qt.AlignTop)\n        self.ui.left_column.menus.menu_2.layout().setAlignment(QtCore.Qt.AlignTop)\n        right_header = SetupMainWindow.create_tab_header(\n            self,\n            Functions.set_svg_icon(\"icon_info.svg\"),\n            \"Advertisements\",\n            self.close_right_column if hasattr(self, 'close_right_column') else None\n        )\n        self.ui.right_column.main_layout.insertWidget(0, right_header)\n        page_1_layout = self.ui.load_pages.page_1.layout()\n        self.ui.load_pages.homeTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        spacer = QSpacerItem(20, 100, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        page_1_layout.addItem(spacer)\n        info_frame = QFrame()\n        info_frame.setMinimumSize(600, 250)\n        info_frame.setStyleSheet(\n            \"background-color: #2A2E37; border: 2px solid #0078D4; border-radius: 10px; padding: 20px;\")\n        info_frame.setFrameShape(QFrame.StyledPanel)\n        info_frame.setFrameShadow(QFrame.Raised)\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(0, 0, 0, 100))\n        info_frame.setGraphicsEffect(shadow)\n        info_layout = QVBoxLayout(info_frame)\n        info_layout.setSpacing(15)\n        info_layout.setContentsMargins(20, 20, 20, 20)\n        cpu_info = cpuinfo.get_cpu_info()\n        processor_label = QLabel(f\"Processor: {cpu_info.get('brand_raw', 'Unknown')}\")\n        processor_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(processor_label)\n        ram = psutil.virtual_memory()\n        ram_label = QLabel(f\"RAM: {ram.total // (1024 ** 3)} GB\")\n        ram_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(ram_label)\n        total_storage = 0\n        primary_drive = None\n        primary_mountpoint = None\n        for partition in psutil.disk_partitions():\n            try:\n                disk = psutil.disk_usage(partition.mountpoint)\n                total_storage += disk.total\n                if platform.system() == \"Windows\":\n                    app_drive = os.path.splitdrive(sys.executable)[0]\n                    if partition.mountpoint.startswith(app_drive):\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n                else:\n                    if partition.mountpoint == '/':\n                        primary_drive = disk\n                        primary_mountpoint = partition.mountpoint\n            except:\n                continue\n        storage_label = QLabel(\n            f\"Storage: {total_storage // (1024 ** 3)} GB (Free on {primary_mountpoint if primary_mountpoint else '/'} : {primary_drive.free // (1024 ** 3) if primary_drive else 0} GB)\"\n        )\n        storage_label.setStyleSheet(\n            f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n        info_layout.addWidget(storage_label)\n        try:\n            w = wmi.WMI()\n            gpu = w.Win32_VideoController()[0]\n            graphics_label = QLabel(f\"Graphics Card: {gpu.Name}\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(f\"Graphics Memory: {gpu.AdapterRAM // (1024 ** 3)} GB\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        except:\n            graphics_label = QLabel(\"Graphics Card: Not Available\")\n            graphics_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(graphics_label)\n            gpu_memory_label = QLabel(\"Graphics Memory: Not Available\")\n            gpu_memory_label.setStyleSheet(\n                f\"font: {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: #FFFFFF; padding: 5px;\")\n            info_layout.addWidget(gpu_memory_label)\n        page_1_layout.addWidget(info_frame, alignment=QtCore.Qt.AlignTop | QtCore.Qt.AlignHCenter)\n        page_2_layout = self.ui.load_pages.page_2.layout()\n        ai_title_label = QLabel(\"Astreis Chatbot\")\n        ai_title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_2_layout.addWidget(ai_title_label, alignment=QtCore.Qt.AlignCenter)\n        self.ui.load_pages.aiTitle.setStyleSheet(\n            f\"font: bold {self.settings['font']['text_size']}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        scroll_content = QWidget()\n        self.scroll_layout = QVBoxLayout(scroll_content)\n        self.scroll_layout.setContentsMargins(10, 10, 10, 10)\n        self.scroll_area.setWidget(scroll_content)\n        self.scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        shadow = QGraphicsDropShadowEffect()\n        shadow.setBlurRadius(25)\n        shadow.setOffset(0, 5)\n        shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.scroll_area.setGraphicsEffect(shadow)\n        self.scroll_area.setMinimumHeight(400)\n        self.scroll_area.setMaximumHeight(600)\n        page_2_layout.addWidget(self.scroll_area, stretch=1)\n        self.input_frame = QFrame()\n        self.input_frame.setMinimumSize(0, 60)\n        self.input_frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n        input_layout = QHBoxLayout(self.input_frame)\n        input_layout.setContentsMargins(10, 5, 10, 5)\n        self.input_field = QLineEdit()\n        self.input_field.setMinimumHeight(40)\n        self.input_field.setStyleSheet(\n            f\"QLineEdit {{ background-color: {self.themes['app_color']['dark_one']}; color: {self.themes['app_color']['text_foreground']}; border-radius: 8px; padding: 5px; font: 12pt 'Segoe UI'; }}\"\n        )\n        self.input_field.setPlaceholderText(\"Ask Astreis a question...\")\n        input_layout.addWidget(self.input_field)\n        self.send_button = QPushButton()\n        self.send_button.setMinimumSize(40, 40)\n        self.send_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.send_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_send.svg\")))\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_layout, self.themes))\n        input_layout.addWidget(self.send_button)\n\n        self.clear_chat_button = QPushButton()\n        self.clear_chat_button.setMinimumSize(40, 40)\n        self.clear_chat_button.setStyleSheet(\n            f\"QPushButton {{ background-color: {self.themes['app_color']['context_color']}; border-radius: 8px; }} QPushButton:hover {{ background-color: {self.themes['app_color']['context_hover']}; }}\")\n        self.clear_chat_button.setIcon(QtGui.QIcon(Functions.set_svg_icon(\"icon_close.svg\")))\n        self.clear_chat_button.setToolTip(\"Clear Chat History\")\n\n        def clear_chat_ui():\n            # Clear backend history\n            AstreisFunc.clear_history()\n            # Clear frontend UI\n            while self.scroll_layout.count():\n                child = self.scroll_layout.takeAt(0)\n                if child.widget():\n                    child.widget().deleteLater()\n\n        self.clear_chat_button.clicked.connect(clear_chat_ui)\n        input_layout.addWidget(self.clear_chat_button)\n\n        page_2_layout.addWidget(self.input_frame, alignment=QtCore.Qt.AlignBottom)\n        page_3_layout = self.ui.load_pages.page_3.layout()\n        title_label = QLabel(\"Optimize PC\")\n        title_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        page_3_layout.addWidget(title_label, alignment=QtCore.Qt.AlignCenter)\n        show_advanced_button = QPushButton(\"Show Advanced\")\n        show_advanced_button.setMinimumSize(150, 50)\n        show_advanced_button.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        show_advanced_button.clicked.connect(lambda: MainFunctions.set_page(self, self.ui.load_pages.page_4))\n        page_3_layout.addWidget(show_advanced_button, alignment=QtCore.Qt.AlignCenter)\n        page_4_layout = self.ui.load_pages.page_4.layout()\n        top_layout = QHBoxLayout()\n        top_layout.addStretch()\n        self.prev_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_left.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Previous Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.prev_button.clicked.connect(self.prev_frame)\n        top_layout.addWidget(self.prev_button)\n        self.switch_button = PyIconButton(\n            icon_path=Functions.set_svg_icon(\"icon_arrow_right.svg\"),\n            parent=self,\n            app_parent=self.ui.central_widget,\n            tooltip_text=\"Next Page\",\n            width=40,\n            height=40,\n            dark_one=self.themes[\"app_color\"][\"dark_one\"],\n            text_foreground=self.themes[\"app_color\"][\"text_foreground\"],\n            context_color=self.themes[\"app_color\"][\"context_color\"]\n        )\n        self.switch_button.clicked.connect(self.switch_frame)\n        top_layout.addWidget(self.switch_button)\n        self.frame_stacked_widget = QStackedWidget()\n        self.optimize_pc_widget = QWidget()\n        self.clean_pc_widget = QWidget()\n        self.optimize_internet_widget = QWidget()\n        self.frame_stacked_widget.addWidget(self.optimize_pc_widget)\n        self.frame_stacked_widget.addWidget(self.clean_pc_widget)\n        self.frame_stacked_widget.addWidget(self.optimize_internet_widget)\n        optimize_pc_layout = QVBoxLayout(self.optimize_pc_widget)\n        clean_pc_layout = QVBoxLayout(self.clean_pc_widget)\n        optimize_internet_layout = QVBoxLayout(self.optimize_internet_widget)\n        optimize_pc_label = QLabel(\"Optimize PC\")\n        optimize_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_pc_layout.addWidget(optimize_pc_label, alignment=QtCore.Qt.AlignCenter)\n        clean_pc_label = QLabel(\"Clean PC\")\n        clean_pc_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        clean_pc_layout.addWidget(clean_pc_label, alignment=QtCore.Qt.AlignCenter)\n        optimize_internet_label = QLabel(\"Optimize Internet\")\n        optimize_internet_label.setStyleSheet(\n            f\"font: bold {self.settings['font']['title_size'] + 14}pt '{self.settings['font']['family']}'; color: {self.themes['app_color']['text_title']}; padding-top: 5px;\"\n        )\n        optimize_internet_layout.addWidget(optimize_internet_label, alignment=QtCore.Qt.AlignCenter)\n        self.optimize_pc_scroll_area = QScrollArea()\n        self.optimize_pc_scroll_area.setWidgetResizable(True)\n        optimize_pc_scroll_content = QWidget()\n        self.optimize_pc_scroll_layout = QGridLayout(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_pc_scroll_layout.setSpacing(10)\n        self.optimize_pc_scroll_area.setWidget(optimize_pc_scroll_content)\n        self.optimize_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        optimize_shadow = QGraphicsDropShadowEffect()\n        optimize_shadow.setBlurRadius(25)\n        optimize_shadow.setOffset(0, 5)\n        optimize_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_pc_scroll_area.setGraphicsEffect(optimize_shadow)\n        self.optimize_pc_scroll_area.setMinimumHeight(400)\n        optimize_pc_layout.addWidget(self.optimize_pc_scroll_area)\n        self.clean_pc_scroll_area = QScrollArea()\n        self.clean_pc_scroll_area.setWidgetResizable(True)\n        clean_pc_scroll_content = QWidget()\n        self.clean_pc_scroll_layout = QGridLayout(clean_pc_scroll_content)\n        self.clean_pc_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.clean_pc_scroll_layout.setSpacing(10)\n        self.clean_pc_scroll_area.setWidget(clean_pc_scroll_content)\n        self.clean_pc_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        clean_shadow = QGraphicsDropShadowEffect()\n        clean_shadow.setBlurRadius(25)\n        clean_shadow.setOffset(0, 5)\n        clean_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.clean_pc_scroll_area.setGraphicsEffect(clean_shadow)\n        self.clean_pc_scroll_area.setMinimumHeight(400)\n        clean_pc_layout.addWidget(self.clean_pc_scroll_area)\n        self.optimize_internet_scroll_area = QScrollArea()\n        self.optimize_internet_scroll_area.setWidgetResizable(True)\n        optimize_internet_scroll_content = QWidget()\n        self.optimize_internet_scroll_layout = QGridLayout(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_layout.setContentsMargins(15, 15, 15, 15)\n        self.optimize_internet_scroll_layout.setSpacing(10)\n        self.optimize_internet_scroll_area.setWidget(optimize_internet_scroll_content)\n        self.optimize_internet_scroll_area.setStyleSheet(f\"\"\"\n            QScrollArea {{\n                background-color: {self.themes['app_color']['dark_one']};\n                border: 2px solid {self.themes['app_color']['context_color']};\n                border-radius: 12px;\n                padding: 15px;\n            }}\n            QScrollArea QWidget {{\n                background-color: {self.themes['app_color']['dark_two']};\n                color: {self.themes['app_color']['text_foreground']};\n            }}\n            QScrollBar:vertical {{\n                background: {self.themes['app_color']['dark_one']};\n                width: 12px;\n                margin: 2px 0 2px 0;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical {{\n                background: {self.themes['app_color']['context_color']};\n                min-height: 40px;\n                border-radius: 6px;\n            }}\n            QScrollBar::handle:vertical:hover {{\n                background: {self.themes['app_color']['context_hover']};\n            }}\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{\n                height: 0px;\n                background: none;\n                border: none;\n            }}\n            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{\n                background: none;\n            }}\n        \"\"\")\n        internet_shadow = QGraphicsDropShadowEffect()\n        internet_shadow.setBlurRadius(25)\n        internet_shadow.setOffset(0, 5)\n        internet_shadow.setColor(QtGui.QColor(86, 138, 242, 180))\n        self.optimize_internet_scroll_area.setGraphicsEffect(internet_shadow)\n        self.optimize_internet_scroll_area.setMinimumHeight(400)\n        optimize_internet_layout.addWidget(self.optimize_internet_scroll_area)\n        optimize_pc_options = [\n            {\n                \"title\": \"Make A Restore Point\",\n                \"desc\": \"Create a restore point for the current system state\",\n                \"warn\": \"Highly Recomended!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Optimize Power Plan\",\n                \"desc\": \"Set power plan to high performance for maximum performance\",\n                \"warn\": \"⚠️Heat Warning\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Adjust Appearance\",\n                \"desc\": \"Disable visual effects for better performance\",\n                \"warn\": \"⚠️Visual Changes\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Defragment Drives\",\n                \"desc\": \"Defragment all hard drives for better performance\",\n                \"warn\": \"⚠️SSD Warning - Will skip SSD drives\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Startup Apps\",\n                \"desc\": \"Disable non-essential apps from starting with Windows\",\n                \"warn\": \"⚠️Feature Breaking - Creates registry backups\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Unnecessary Services\",\n                \"desc\": \"Disables a list of safe-to-disable services like Fax, Xbox services, etc.\",\n                \"warn\": \"⚠️Can break some functionality\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Registry\",\n                \"desc\": \"Clean and optimize the Windows registry for improved performance\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Search Index\",\n                \"desc\": \"Disable Search Indexing\",\n                \"warn\": \"⚠️You won't be able to search web on search\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Classic Right Click Menu\",\n                \"desc\": \"Return Classic Right Click Menu from Windows 10\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Open Desktop Utility\",\n                \"desc\": \"Runs the best Desktop Utility @ChrisTitus\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        clean_pc_options = [\n            {\n                \"title\": \"Clear Temporary Files\",\n                \"desc\": \"Remove temporary files to free up disk space\",\n                \"warn\": \"Recommended Once A Week!\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"green\"\n            },\n            {\n                \"title\": \"Clean Recycle Bin\",\n                \"desc\": \"Cleans/Empties Recycle Bin\",\n                \"warn\": \"⚠️Check Recycle Bin\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Clean Browser Cache\",\n                \"desc\": \"Cleans Browser Cache and History\",\n                \"warn\": \"\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        optimize_internet_options = [\n            {\n                \"title\": \"Optimize DNS\",\n                \"desc\": \"Switch to a faster DNS server (e.g., Google DNS)\",\n                \"warn\": \"⚠️May require network restart\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Disable Metered Connection\",\n                \"desc\": \"Turn off metered connection limits\",\n                \"warn\": \"⚠️May increase data usage\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Flush DNS Cache\",\n                \"desc\": \"Clear DNS cache for faster browsing\",\n                \"warn\": \"⚠️Temporary network disruption\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            },\n            {\n                \"title\": \"Optimize Network Adapters\",\n                \"desc\": \"Tune network settings for better speed\",\n                \"warn\": \"⚠️Requires admin rights\",\n                \"desc_color\": \"default\",\n                \"warn_color\": \"yellow\"\n            }\n        ]\n        for i, option in enumerate(optimize_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(clean_pc_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.clean_pc_scroll_layout.addWidget(frame, i // 2, i % 2)\n        for i, option in enumerate(optimize_internet_options):\n            frame = QFrame()\n            frame.setStyleSheet(f\"background-color: {self.themes['app_color']['dark_three']}; border-radius: 10px;\")\n            frame.setFixedWidth(300)\n            inner_layout = QVBoxLayout(frame)\n            inner_layout.setContentsMargins(10, 5, 10, 5)\n            title_label = QLabel(option[\"title\"])\n            title_label.setStyleSheet(f\"color: {self.themes['app_color']['text_foreground']}; font: bold 12pt 'Segoe UI';\")\n            inner_layout.addWidget(title_label)\n            desc_color = self.themes['app_color']['text_description']\n            if \"desc_color\" in option and option[\"desc_color\"].lower() == \"yellow\":\n                desc_color = self.themes['app_color']['yellow']\n            desc_label = QLabel(option[\"desc\"])\n            desc_label.setStyleSheet(f\"color: {desc_color}; font: 10pt 'Segoe UI';\")\n            desc_label.setWordWrap(True)\n            inner_layout.addWidget(desc_label)\n            if \"warn\" in option:\n                warn_label = QLabel(option[\"warn\"])\n                warn_color = self.themes['app_color']['text_description']\n                if option.get(\"warn_color\", \"\").lower() == \"yellow\":\n                    warn_color = self.themes['app_color']['yellow']\n                elif option.get(\"warn_color\", \"\").lower() == \"green\":\n                    warn_color = self.themes['app_color']['green']\n                warn_label.setStyleSheet(f\"color: {warn_color}; font: 10pt 'Segoe UI';\")\n                warn_label.setWordWrap(True)\n                inner_layout.addWidget(warn_label)\n            toggle = PyToggle(\n                width=50,\n                bg_color=self.themes[\"app_color\"][\"dark_two\"],\n                circle_color=\"#DDD\",\n                active_color=self.themes[\"app_color\"][\"context_color\"]\n            )\n            toggle_layout = QHBoxLayout()\n            toggle_layout.addStretch()\n            toggle_layout.addWidget(toggle)\n            inner_layout.addLayout(toggle_layout)\n            self.optimize_internet_scroll_layout.addWidget(frame, i // 2, i % 2)\n        page_4_layout.addLayout(top_layout)\n        page_4_layout.addWidget(self.frame_stacked_widget)\n        optimize_btn = QPushButton(\"Optimize\")\n        optimize_btn.setMinimumSize(150, 50)\n        optimize_btn.setStyleSheet(f\"\"\"\n            QPushButton {{\n                background-color: {self.themes[\"app_color\"][\"context_color\"]};\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14pt;\n                font-weight: bold;\n                padding: 5px;\n            }}\n            QPushButton:hover {{\n                background-color: {self.themes[\"app_color\"][\"context_hover\"]};\n            }}\n            QPushButton:pressed {{\n                background-color: {self.themes[\"app_color\"][\"context_pressed\"]};\n            }}\n        \"\"\")\n        optimize_btn.clicked.connect(lambda: self.window().optimize_selected())\n        page_4_layout.addWidget(optimize_btn, alignment=QtCore.Qt.AlignCenter)\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        next_index = (current_index + 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(next_index)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        prev_index = (current_index - 1) % 3\n        self.frame_stacked_widget.setCurrentIndex(prev_index)\n\n    def optimize_selected(self):\n        layouts = [\n            (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n            (self.clean_pc_scroll_layout, \"Clean PC\"),\n            (self.optimize_internet_scroll_layout, \"Optimize Internet\")\n        ]\n        for layout, category in layouts:\n            for i in range(layout.count()):\n                widget = layout.itemAt(i).widget()\n                if widget:\n                    toggle_layout = widget.layout().itemAt(widget.layout().count() - 1).layout()\n                    toggle = toggle_layout.itemAt(1).widget()\n                    if toggle.isChecked():\n                        title = widget.layout().itemAt(0).widget().text()\n                        print(f\"Optimizing: {title} in {category}\")"
                    }
                ]
            },
            "createdAt": 1751031565901,
            "isInternal": false
        },
        {
            "id": "ee01404d-52ba-4fc9-bb41-8b2a8c4dde80",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "analyze the whole code project"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "main.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "import functools\nimport sys\nimport os\nimport time\nimport ctypes\nfrom PySide6.QtCore import QTimer, QThread, QObject, Signal\nfrom PySide6.QtWidgets import QMainWindow, QProgressDialog, QMessageBox, QApplication\nfrom PySide6.QtGui import QIcon\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.core.functions import Functions\nfrom gui.uis.windows.main_window import *\nfrom gui.uis.windows.main_window.functions_main_window import *\nfrom gui.widgets import *\nfrom gui.uis.windows.main_window.AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nimport socket\n\nprint(\"--- Script Starting ---\")\n\n\ndef check_single_instance(port=65432):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.bind((\"127.0.0.1\", port))\n        s.listen(1)\n        return s\n    except socket.error:\n        return None\n\n\ndef run_as_admin():\n    if \"--no-admin-check\" in sys.argv:\n        print(\"--- Skipping admin check due to --no-admin-check flag ---\")\n        return\n    if not ctypes.windll.shell32.IsUserAnAdmin():\n        print(\"--- Not running as admin, relaunching with elevated privileges ---\")\n        params = ' '.join([f'\"{arg}\"' for arg in sys.argv if arg != \"--no-admin-check\"] + [\"--no-admin-check\"])\n        try:\n            ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, params, None, 1)\n            print(\"--- Relaunched as admin, exiting current process ---\")\n            os._exit(0)\n        except Exception as e:\n            print(f\"--- Failed to relaunch as admin: {e} ---\")\n            show_critical_message(None, \"Admin Required\",\n                                  \"This application requires Administrator privileges. Please run as Administrator and try again.\")\n            os._exit(1)\n    else:\n        print(\"--- Already running as admin ---\")\n\n\nos.environ[\"QT_FONT_DPI\"] = \"96\"\n\noption_functions = {\n    \"Make A Restore Point\": AstreisFunc.make_restore_point,\n    \"Optimize Power Plan\": AstreisFunc.optimize_astreis_power_plan,\n    \"Adjust Appearance\": AstreisFunc.optimize_appearance,\n    \"Defragment Drives\": AstreisFunc.optimize_defrag,\n    \"Disable Startup Apps\": AstreisFunc.optimize_startup_apps,\n    \"Disable Unnecessary Services\": AstreisFunc.optimize_services,\n    \"Optimize Registry\": AstreisFunc.optimize_registry,\n    \"Classic Right Click Menu\": AstreisFunc.enable_classic_right_click,\n    \"Disable Search Index\": AstreisFunc.disable_search_index,\n    \"Open Desktop Utility\": AstreisFunc.run_windows_utility,\n    \"Clear Temporary Files\": AstreisFunc.placeholder,\n    \"Clean Recycle Bin\": AstreisFunc.placeholder,\n    \"Clean Browser Cache\": AstreisFunc.placeholder,\n    \"Clean System Logs\": AstreisFunc.placeholder,\n    \"Run Disk Cleanup\": AstreisFunc.placeholder,\n\n}\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n        settings = Settings()\n        self.settings = settings.items\n        self.hide_grips = True\n        self.current_left_tab = None\n        SetupMainWindow.setup_gui(self)\n        self.ui.left_column.btn_close.clicked.connect(self.close_left_column)\n        self.show()\n\n    def close_left_column(self):\n        if MainFunctions.left_column_is_visible(self):\n            MainFunctions.toggle_left_column(self)\n            self.ui.left_menu.deselect_all_tab()\n            self.current_left_tab = None\n\n    def btn_clicked(self):\n        btn = SetupMainWindow.setup_btns(self)\n        btn_name = btn.objectName()\n        if btn_name != \"btn_settings\" and btn_name != \"btn_info\":\n            self.ui.left_menu.deselect_all_tab()\n        if btn_name == \"btn_home\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        elif btn_name == \"btn_ai\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_2)\n        elif btn_name == \"btn_power\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_3)\n        elif btn_name in [\"btn_info\", \"btn_settings\"]:\n            is_visible = MainFunctions.left_column_is_visible(self)\n            if self.current_left_tab == btn_name and is_visible:\n                self.ui.left_menu.deselect_all_tab()\n                MainFunctions.toggle_left_column(self)\n                self.current_left_tab = None\n            else:\n                if not is_visible:\n                    MainFunctions.toggle_left_column(self)\n                self.ui.left_menu.select_only_one_tab(btn_name)\n                self.current_left_tab = btn_name\n                if btn_name == \"btn_info\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_2,\n                        title=\"Info tab\",\n                        icon_path=Functions.set_svg_icon(\"icon_info.svg\")\n                    )\n                elif btn_name == \"btn_settings\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_1,\n                        title=\"Astreis Optimizer\",\n                        icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n                    )\n        print(f\"Button {btn_name}, clicked!\")\n\n    def btn_released(self):\n        btn = SetupMainWindow.setup_btns(self)\n        print(f\"Button {btn.objectName()}, released!\")\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index < self.frame_stacked_widget.count() - 1:\n            self.frame_stacked_widget.setCurrentIndex(current_index + 1)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index > 0:\n            self.frame_stacked_widget.setCurrentIndex(current_index - 1)\n\n    def optimize_selected(self):\n        try:\n            print(\"Starting optimize_selected\")\n            themes = Themes().items\n            scroll_layouts = [\n                (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n                (self.clean_pc_scroll_layout, \"Clean PC\"),\n                (self.optimize_internet_scroll_layout, \"Optimize Internet\"),\n            ]\n            selected_options = []\n            results = []\n            for scroll_layout, category in scroll_layouts:\n                if not scroll_layout:\n                    print(f\"No layout for {category}\")\n                    continue\n                print(f\"Processing layout: {category}, count: {scroll_layout.count()}\")\n                for i in range(scroll_layout.count()):\n                    item = scroll_layout.itemAt(i)\n                    if not item:\n                        print(f\"No item at index {i} in {category}\")\n                        continue\n                    frame = item.widget()\n                    if not frame:\n                        print(f\"No widget at index {i} in {category}\")\n                        continue\n                    layout = frame.layout()\n                    if not layout:\n                        print(f\"No layout for frame at index {i} in {category}\")\n                        continue\n                    toggle_layout = layout.itemAt(layout.count() - 1)\n                    if not toggle_layout or not toggle_layout.layout():\n                        print(f\"No toggle layout at index {i} in {category}\")\n                        continue\n                    toggle = toggle_layout.layout().itemAt(1).widget()\n                    title = layout.itemAt(0).widget().text()\n                    print(f\"Found option: {title} in {category}, checked: {toggle.isChecked()}\")\n                    if toggle.isChecked() and (title, category) not in selected_options:\n                        selected_options.append((title, category))\n            if selected_options:\n                print(f\"Optimizing: {', '.join([f'{title} ({cat})' for title, cat in selected_options])}\")\n                self.progress_dialog = QProgressDialog(\"Running optimizations...\", \"Cancel\", 0, 100, self)\n                self.progress_dialog.setWindowTitle(\"Optimization Progress\")\n                self.progress_dialog.setMinimumSize(500, 150)\n                self.progress_dialog.setStyleSheet(f\"\"\"\n                    QProgressDialog {{\n                        background-color: {themes['app_color']['dark_one']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 10px;\n                        font-family: 'Segoe UI';\n                        font-size: 12pt;\n                    }}\n                    QProgressBar {{\n                        background-color: {themes['app_color']['dark_two']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 8px;\n                        text-align: center;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-height: 25px;\n                    }}\n                    QProgressBar::chunk {{\n                        background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                            stop:0 {themes['app_color']['context_color']},\n                            stop:1 {themes['app_color']['context_hover']});\n                        border-radius: 6px;\n                        margin: 2px;\n                    }}\n                    QPushButton {{\n                        background-color: {themes['app_color']['context_color']};\n                        color: #FFFFFF;\n                        border: none;\n                        border-radius: 6px;\n                        padding: 8px 16px;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-width: 80px;\n                    }}\n                    QPushButton:hover {{\n                        background-color: {themes['app_color']['context_hover']};\n                    }}\n                    QPushButton:pressed {{\n                        background-color: {themes['app_color']['context_pressed']};\n                    }}\n                    QPushButton:disabled {{\n                        background-color: #555555;\n                        color: #FFFFFF;\n                    }}\n                    QLabel {{\n                        color: {themes['app_color']['text_foreground']};\n                        font-size: 11pt;\n                        font-weight: bold;\n                        padding: 5px;\n                    }}\n                \"\"\")\n                self.progress_dialog.setModal(True)\n                self.progress_dialog.setAutoClose(False)\n                self.progress_dialog.setAutoReset(False)\n                self.progress_dialog.canceled.connect(self.on_cancel)\n                self.optimization_thread = QThread(self)\n                self.optimization_worker = OptimizationWorker(selected_options, option_functions)\n                self.optimization_worker.moveToThread(self.optimization_thread)\n                self.optimization_worker.progress_update.connect(self.on_progress_update)\n                self.optimization_worker.result_ready.connect(self.on_result_ready)\n                self.optimization_thread.started.connect(self.optimization_worker.run)\n                self.optimization_worker.finished.connect(self.on_optimization_finished)\n                self.optimization_worker.finished.connect(self.optimization_thread.quit)\n                self.optimization_worker.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_thread.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_results = []\n                self.progress_dialog.show()\n                self.optimization_thread.start()\n            else:\n                print(\"No options selected\")\n                show_info_message(self, \"No Options Selected\", \"Please select at least one optimization option.\")\n        except Exception as e:\n            print(f\"Error in optimize_selected: {str(e)}\")\n            show_critical_message(self, \"Error\", f\"An error occurred in optimize_selected: {str(e)}\")\n\n    def on_progress_update(self, value, text):\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setValue(value)\n            self.progress_dialog.setLabelText(text)\n\n    def on_result_ready(self, result, success):\n        self.optimization_results.append(result)\n\n    def on_cancel(self):\n        if hasattr(self, 'optimization_worker'):\n            self.optimization_worker.stop()\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setLabelText(\"Cancelling...\")\n            self.progress_dialog.setEnabled(False)\n\n    def on_optimization_finished(self):\n        print(\"--- Worker has finished, preparing to show results. ---\")\n        if hasattr(self, 'progress_dialog') and self.progress_dialog.isVisible():\n            self.progress_dialog.close()\n        QTimer.singleShot(100, self.show_completion_dialog)\n\n    def show_completion_dialog(self):\n        themes = Themes().items\n        msg_box = PyMessageBox(self)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        result_text = \"Optimization tasks completed:\\n\\n\" + \"\\n\".join(self.optimization_results)\n        msg_box.setText(result_text)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def resizeEvent(self, event):\n        super().resizeEvent(event)\n\n    def mousePressEvent(self, event):\n        self.dragPos = event.globalPosition().toPoint()\n\n    def toggle_advanced(self, button):\n        if self.advanced_scroll_area.isVisible():\n            self.advanced_scroll_area.setVisible(False)\n            button.setText(\"Advanced\")\n        else:\n            self.advanced_scroll_area.setVisible(True)\n            button.setText(\"Basic\")\n\n    def setup_ai(self):\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n\n\nclass OptimizationWorker(QObject):\n    finished = Signal()\n    result_ready = Signal(str, bool)\n    progress_update = Signal(int, str)\n\n    def __init__(self, selected_options, option_functions):\n        super().__init__()\n        self.selected_options = selected_options\n        self.option_functions = option_functions\n        self._running = True\n\n    def stop(self):\n        self._running = False\n\n    def run(self):\n        total_options = len(self.selected_options)\n        for i, (title, category) in enumerate(self.selected_options):\n            if not self._running:\n                break\n            progress_percent = int(((i + 0.5) / total_options) * 100)\n            print(f\"Worker: Starting {title} ({category})\")\n            self.progress_update.emit(progress_percent, f\"Running: {title}...\")\n            if title in self.option_functions:\n                try:\n                    success, message = self.option_functions[title]()\n                    print(f\"Worker: {title} returned (success: {success}, message: {message})\")\n                    if success:\n                        result_msg = f\"{title}: {message}\"\n                    else:\n                        result_msg = f\"{title}: Skipped - {message}\"\n                    self.result_ready.emit(result_msg, success)\n                except Exception as e:\n                    print(f\"Worker: {title} failed with error: {str(e)}\")\n                    result_msg = f\"{title}: Skipped due to error - {str(e)}\"\n                    self.result_ready.emit(result_msg, False)\n        self.progress_update.emit(100, \"Optimization Complete\")\n        self.finished.emit()\n\n\nif __name__ == \"__main__\":\n    instance_socket = check_single_instance()\n    if not instance_socket:\n        print(\"--- Another instance is already running, exiting ---\")\n        sys.exit(0)\n    run_as_admin()\n    try:\n        print(\"--- Creating QApplication ---\")\n        app = QApplication(sys.argv)\n        app.setWindowIcon(QIcon(\"icon.ico\"))\n        print(\"--- Creating MainWindow ---\")\n        window = MainWindow()\n        print(\"--- Starting event loop (app.exec()) ---\")\n        exit_code = app.exec()\n        print(f\"--- Event loop finished with exit code: {exit_code} ---\")\n        instance_socket.close()\n        sys.exit(exit_code)\n    except Exception as e:\n        print(f\"--- An unhandled exception occurred: {e} ---\")\n        import traceback\n\n        traceback.print_exc()\n        show_critical_message(None, \"Fatal Error\", f\"A fatal error occurred and the application must close:\\n\\n{e}\")\n        input(\"Press Enter to exit...\")\n    finally:\n        print(\"--- Script Exiting ---\")\n        time.sleep(2)"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui\\API_KEY.env",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\API_KEY.env",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\requires.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\requires.txt",
                        "sources": []
                    },
                    {
                        "path": "requirements.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\requirements.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\SOURCES.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\SOURCES.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\entry_points.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\entry_points.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\top_level.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\top_level.txt",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "README.md",
                        "fsPath": "README.md"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "import functools\nimport sys\nimport os\nimport time\nimport ctypes\nfrom PySide6.QtCore import QTimer, QThread, QObject, Signal\nfrom PySide6.QtWidgets import QMainWindow, QProgressDialog, QMessageBox, QApplication\nfrom PySide6.QtGui import QIcon\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.core.functions import Functions\nfrom gui.uis.windows.main_window import *\nfrom gui.uis.windows.main_window.functions_main_window import *\nfrom gui.widgets import *\nfrom gui.uis.windows.main_window.AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nimport socket\n\nprint(\"--- Script Starting ---\")\n\n\ndef check_single_instance(port=65432):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.bind((\"127.0.0.1\", port))\n        s.listen(1)\n        return s\n    except socket.error:\n        return None\n\n\ndef run_as_admin():\n    if \"--no-admin-check\" in sys.argv:\n        print(\"--- Skipping admin check due to --no-admin-check flag ---\")\n        return\n    if not ctypes.windll.shell32.IsUserAnAdmin():\n        print(\"--- Not running as admin, relaunching with elevated privileges ---\")\n        params = ' '.join([f'\"{arg}\"' for arg in sys.argv if arg != \"--no-admin-check\"] + [\"--no-admin-check\"])\n        try:\n            ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, params, None, 1)\n            print(\"--- Relaunched as admin, exiting current process ---\")\n            os._exit(0)\n        except Exception as e:\n            print(f\"--- Failed to relaunch as admin: {e} ---\")\n            show_critical_message(None, \"Admin Required\",\n                                  \"This application requires Administrator privileges. Please run as Administrator and try again.\")\n            os._exit(1)\n    else:\n        print(\"--- Already running as admin ---\")\n\n\nos.environ[\"QT_FONT_DPI\"] = \"96\"\n\noption_functions = {\n    \"Make A Restore Point\": AstreisFunc.make_restore_point,\n    \"Optimize Power Plan\": AstreisFunc.optimize_astreis_power_plan,\n    \"Adjust Appearance\": AstreisFunc.optimize_appearance,\n    \"Defragment Drives\": AstreisFunc.optimize_defrag,\n    \"Disable Startup Apps\": AstreisFunc.optimize_startup_apps,\n    \"Disable Unnecessary Services\": AstreisFunc.optimize_services,\n    \"Optimize Registry\": AstreisFunc.optimize_registry,\n    \"Classic Right Click Menu\": AstreisFunc.enable_classic_right_click,\n    \"Disable Search Index\": AstreisFunc.disable_search_index,\n    \"Open Desktop Utility\": AstreisFunc.run_windows_utility,\n    \"Clear Temporary Files\": AstreisFunc.placeholder,\n    \"Clean Recycle Bin\": AstreisFunc.placeholder,\n    \"Clean Browser Cache\": AstreisFunc.placeholder,\n    \"Clean System Logs\": AstreisFunc.placeholder,\n    \"Run Disk Cleanup\": AstreisFunc.placeholder,\n\n}\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n        settings = Settings()\n        self.settings = settings.items\n        self.hide_grips = True\n        self.current_left_tab = None\n        SetupMainWindow.setup_gui(self)\n        self.ui.left_column.btn_close.clicked.connect(self.close_left_column)\n        self.show()\n\n    def close_left_column(self):\n        if MainFunctions.left_column_is_visible(self):\n            MainFunctions.toggle_left_column(self)\n            self.ui.left_menu.deselect_all_tab()\n            self.current_left_tab = None\n\n    def btn_clicked(self):\n        btn = SetupMainWindow.setup_btns(self)\n        btn_name = btn.objectName()\n        if btn_name != \"btn_settings\" and btn_name != \"btn_info\":\n            self.ui.left_menu.deselect_all_tab()\n        if btn_name == \"btn_home\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        elif btn_name == \"btn_ai\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_2)\n        elif btn_name == \"btn_power\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_3)\n        elif btn_name in [\"btn_info\", \"btn_settings\"]:\n            is_visible = MainFunctions.left_column_is_visible(self)\n            if self.current_left_tab == btn_name and is_visible:\n                self.ui.left_menu.deselect_all_tab()\n                MainFunctions.toggle_left_column(self)\n                self.current_left_tab = None\n            else:\n                if not is_visible:\n                    MainFunctions.toggle_left_column(self)\n                self.ui.left_menu.select_only_one_tab(btn_name)\n                self.current_left_tab = btn_name\n                if btn_name == \"btn_info\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_2,\n                        title=\"Info tab\",\n                        icon_path=Functions.set_svg_icon(\"icon_info.svg\")\n                    )\n                elif btn_name == \"btn_settings\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_1,\n                        title=\"Astreis Optimizer\",\n                        icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n                    )\n        print(f\"Button {btn_name}, clicked!\")\n\n    def btn_released(self):\n        btn = SetupMainWindow.setup_btns(self)\n        print(f\"Button {btn.objectName()}, released!\")\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index < self.frame_stacked_widget.count() - 1:\n            self.frame_stacked_widget.setCurrentIndex(current_index + 1)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index > 0:\n            self.frame_stacked_widget.setCurrentIndex(current_index - 1)\n\n    def optimize_selected(self):\n        try:\n            print(\"Starting optimize_selected\")\n            themes = Themes().items\n            scroll_layouts = [\n                (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n                (self.clean_pc_scroll_layout, \"Clean PC\"),\n                (self.optimize_internet_scroll_layout, \"Optimize Internet\"),\n            ]\n            selected_options = []\n            results = []\n            for scroll_layout, category in scroll_layouts:\n                if not scroll_layout:\n                    print(f\"No layout for {category}\")\n                    continue\n                print(f\"Processing layout: {category}, count: {scroll_layout.count()}\")\n                for i in range(scroll_layout.count()):\n                    item = scroll_layout.itemAt(i)\n                    if not item:\n                        print(f\"No item at index {i} in {category}\")\n                        continue\n                    frame = item.widget()\n                    if not frame:\n                        print(f\"No widget at index {i} in {category}\")\n                        continue\n                    layout = frame.layout()\n                    if not layout:\n                        print(f\"No layout for frame at index {i} in {category}\")\n                        continue\n                    toggle_layout = layout.itemAt(layout.count() - 1)\n                    if not toggle_layout or not toggle_layout.layout():\n                        print(f\"No toggle layout at index {i} in {category}\")\n                        continue\n                    toggle = toggle_layout.layout().itemAt(1).widget()\n                    title = layout.itemAt(0).widget().text()\n                    print(f\"Found option: {title} in {category}, checked: {toggle.isChecked()}\")\n                    if toggle.isChecked() and (title, category) not in selected_options:\n                        selected_options.append((title, category))\n            if selected_options:\n                print(f\"Optimizing: {', '.join([f'{title} ({cat})' for title, cat in selected_options])}\")\n                self.progress_dialog = QProgressDialog(\"Running optimizations...\", \"Cancel\", 0, 100, self)\n                self.progress_dialog.setWindowTitle(\"Optimization Progress\")\n                self.progress_dialog.setMinimumSize(500, 150)\n                self.progress_dialog.setStyleSheet(f\"\"\"\n                    QProgressDialog {{\n                        background-color: {themes['app_color']['dark_one']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 10px;\n                        font-family: 'Segoe UI';\n                        font-size: 12pt;\n                    }}\n                    QProgressBar {{\n                        background-color: {themes['app_color']['dark_two']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 8px;\n                        text-align: center;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-height: 25px;\n                    }}\n                    QProgressBar::chunk {{\n                        background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                            stop:0 {themes['app_color']['context_color']},\n                            stop:1 {themes['app_color']['context_hover']});\n                        border-radius: 6px;\n                        margin: 2px;\n                    }}\n                    QPushButton {{\n                        background-color: {themes['app_color']['context_color']};\n                        color: #FFFFFF;\n                        border: none;\n                        border-radius: 6px;\n                        padding: 8px 16px;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-width: 80px;\n                    }}\n                    QPushButton:hover {{\n                        background-color: {themes['app_color']['context_hover']};\n                    }}\n                    QPushButton:pressed {{\n                        background-color: {themes['app_color']['context_pressed']};\n                    }}\n                    QPushButton:disabled {{\n                        background-color: #555555;\n                        color: #FFFFFF;\n                    }}\n                    QLabel {{\n                        color: {themes['app_color']['text_foreground']};\n                        font-size: 11pt;\n                        font-weight: bold;\n                        padding: 5px;\n                    }}\n                \"\"\")\n                self.progress_dialog.setModal(True)\n                self.progress_dialog.setAutoClose(False)\n                self.progress_dialog.setAutoReset(False)\n                self.progress_dialog.canceled.connect(self.on_cancel)\n                self.optimization_thread = QThread(self)\n                self.optimization_worker = OptimizationWorker(selected_options, option_functions)\n                self.optimization_worker.moveToThread(self.optimization_thread)\n                self.optimization_worker.progress_update.connect(self.on_progress_update)\n                self.optimization_worker.result_ready.connect(self.on_result_ready)\n                self.optimization_thread.started.connect(self.optimization_worker.run)\n                self.optimization_worker.finished.connect(self.on_optimization_finished)\n                self.optimization_worker.finished.connect(self.optimization_thread.quit)\n                self.optimization_worker.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_thread.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_results = []\n                self.progress_dialog.show()\n                self.optimization_thread.start()\n            else:\n                print(\"No options selected\")\n                show_info_message(self, \"No Options Selected\", \"Please select at least one optimization option.\")\n        except Exception as e:\n            print(f\"Error in optimize_selected: {str(e)}\")\n            show_critical_message(self, \"Error\", f\"An error occurred in optimize_selected: {str(e)}\")\n\n    def on_progress_update(self, value, text):\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setValue(value)\n            self.progress_dialog.setLabelText(text)\n\n    def on_result_ready(self, result, success):\n        self.optimization_results.append(result)\n\n    def on_cancel(self):\n        if hasattr(self, 'optimization_worker'):\n            self.optimization_worker.stop()\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setLabelText(\"Cancelling...\")\n            self.progress_dialog.setEnabled(False)\n\n    def on_optimization_finished(self):\n        print(\"--- Worker has finished, preparing to show results. ---\")\n        if hasattr(self, 'progress_dialog') and self.progress_dialog.isVisible():\n            self.progress_dialog.close()\n        QTimer.singleShot(100, self.show_completion_dialog)\n\n    def show_completion_dialog(self):\n        themes = Themes().items\n        msg_box = PyMessageBox(self)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        result_text = \"Optimization tasks completed:\\n\\n\" + \"\\n\".join(self.optimization_results)\n        msg_box.setText(result_text)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def resizeEvent(self, event):\n        super().resizeEvent(event)\n\n    def mousePressEvent(self, event):\n        self.dragPos = event.globalPosition().toPoint()\n\n    def toggle_advanced(self, button):\n        if self.advanced_scroll_area.isVisible():\n            self.advanced_scroll_area.setVisible(False)\n            button.setText(\"Advanced\")\n        else:\n            self.advanced_scroll_area.setVisible(True)\n            button.setText(\"Basic\")\n\n    def setup_ai(self):\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n\n\nclass OptimizationWorker(QObject):\n    finished = Signal()\n    result_ready = Signal(str, bool)\n    progress_update = Signal(int, str)\n\n    def __init__(self, selected_options, option_functions):\n        super().__init__()\n        self.selected_options = selected_options\n        self.option_functions = option_functions\n        self._running = True\n\n    def stop(self):\n        self._running = False\n\n    def run(self):\n        total_options = len(self.selected_options)\n        for i, (title, category) in enumerate(self.selected_options):\n            if not self._running:\n                break\n            progress_percent = int(((i + 0.5) / total_options) * 100)\n            print(f\"Worker: Starting {title} ({category})\")\n            self.progress_update.emit(progress_percent, f\"Running: {title}...\")\n            if title in self.option_functions:\n                try:\n                    success, message = self.option_functions[title]()\n                    print(f\"Worker: {title} returned (success: {success}, message: {message})\")\n                    if success:\n                        result_msg = f\"{title}: {message}\"\n                    else:\n                        result_msg = f\"{title}: Skipped - {message}\"\n                    self.result_ready.emit(result_msg, success)\n                except Exception as e:\n                    print(f\"Worker: {title} failed with error: {str(e)}\")\n                    result_msg = f\"{title}: Skipped due to error - {str(e)}\"\n                    self.result_ready.emit(result_msg, False)\n        self.progress_update.emit(100, \"Optimization Complete\")\n        self.finished.emit()\n\n\nif __name__ == \"__main__\":\n    instance_socket = check_single_instance()\n    if not instance_socket:\n        print(\"--- Another instance is already running, exiting ---\")\n        sys.exit(0)\n    run_as_admin()\n    try:\n        print(\"--- Creating QApplication ---\")\n        app = QApplication(sys.argv)\n        app.setWindowIcon(QIcon(\"icon.ico\"))\n        print(\"--- Creating MainWindow ---\")\n        window = MainWindow()\n        print(\"--- Starting event loop (app.exec()) ---\")\n        exit_code = app.exec()\n        print(f\"--- Event loop finished with exit code: {exit_code} ---\")\n        instance_socket.close()\n        sys.exit(exit_code)\n    except Exception as e:\n        print(f\"--- An unhandled exception occurred: {e} ---\")\n        import traceback\n\n        traceback.print_exc()\n        show_critical_message(None, \"Fatal Error\", f\"A fatal error occurred and the application must close:\\n\\n{e}\")\n        input(\"Press Enter to exit...\")\n    finally:\n        print(\"--- Script Exiting ---\")\n        time.sleep(2)"
                    },
                    {
                        "path": "README.md",
                        "fsPath": "README.md"
                    }
                ]
            },
            "createdAt": 1751032151951,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "analyze the whole code project"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "bdb1d842-8883-426f-802b-52243da6db6b",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "The provided code is part of a project named \"Astreis,\" which is a comprehensive PC optimization tool built using PySide6. Here's an analysis of the code and its functionality:\n\n### Overview\n\n- **Purpose**: The application is designed to optimize PC performance by providing various system optimization tools, an AI chat assistant, and performance monitoring features.\n- **Main Components**:\n  - **System Optimization**: Includes features like power plan optimization, appearance settings, and drive defragmentation.\n  - **AI Chat Assistant**: Offers optimization advice and troubleshooting through an integrated AI chatbot.\n  - **System Monitoring**: Displays real-time system information.\n  - **Modern UI**: Features a responsive interface with dark theme support.\n  - **Admin Privileges**: Automatically elevates privileges for system-level optimizations.\n\n### Key Features in `main.py`\n\n1. **Single Instance Check**: The `check_single_instance` function ensures that only one instance of the application runs at a time by attempting to bind to a specific port.\n\n2. **Admin Privileges**: The `run_as_admin` function checks if the application is running with administrator privileges and attempts to relaunch with elevated privileges if not.\n\n3. **Option Functions**: A dictionary `option_functions` maps optimization task names to their corresponding functions in the `AstreisFunc` module. Some tasks are placeholders, indicating that their implementations might be pending.\n\n4. **MainWindow Class**: \n   - Initializes the main window and sets up the UI.\n   - Handles button clicks to navigate between different sections of the application.\n   - Manages the optimization process through the `optimize_selected` method, which collects selected options and executes them using a separate thread (`OptimizationWorker`).\n\n5. **OptimizationWorker Class**: \n   - Runs selected optimization tasks in a separate thread.\n   - Emits signals to update progress and notify when tasks are completed.\n\n6. **GUI Elements**: Utilizes PySide6 for creating the GUI, including dialogs, progress bars, and message boxes.\n\n### Project Structure\n\n- **Main File**: `main.py` serves as the entry point for the application.\n- **GUI Components**: Located in the `gui` directory, which includes core functionality, UI definitions, and custom widgets.\n- **Functionality Module**: `AstreisFunc` contains the main optimization functions.\n- **Dependencies**: Listed in `requirements.txt`, including PySide6 for the GUI and other libraries for system monitoring and AI chat functionality.\n\n### Usage and Setup\n\n- **Installation**: Requires Windows 10/11, Python 3.8 or higher, and administrator privileges.\n- **Running the Application**: After installing dependencies, the application can be started with `python main.py`.\n- **Building an Executable**: Instructions are provided for creating a standalone executable using PyInstaller.\n\n### Conclusion\n\nThe Astreis project is a well-structured application aimed at optimizing PC performance with a focus on user-friendly design and functionality. The code in `main.py` is responsible for initializing the application, managing the main window, and executing optimization tasks. The project is designed to be extensible, with placeholders for additional functionality and a clear separation of concerns between different components."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "main.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "import functools\nimport sys\nimport os\nimport time\nimport ctypes\nfrom PySide6.QtCore import QTimer, QThread, QObject, Signal\nfrom PySide6.QtWidgets import QMainWindow, QProgressDialog, QMessageBox, QApplication\nfrom PySide6.QtGui import QIcon\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.core.functions import Functions\nfrom gui.uis.windows.main_window import *\nfrom gui.uis.windows.main_window.functions_main_window import *\nfrom gui.widgets import *\nfrom gui.uis.windows.main_window.AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nimport socket\n\nprint(\"--- Script Starting ---\")\n\n\ndef check_single_instance(port=65432):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.bind((\"127.0.0.1\", port))\n        s.listen(1)\n        return s\n    except socket.error:\n        return None\n\n\ndef run_as_admin():\n    if \"--no-admin-check\" in sys.argv:\n        print(\"--- Skipping admin check due to --no-admin-check flag ---\")\n        return\n    if not ctypes.windll.shell32.IsUserAnAdmin():\n        print(\"--- Not running as admin, relaunching with elevated privileges ---\")\n        params = ' '.join([f'\"{arg}\"' for arg in sys.argv if arg != \"--no-admin-check\"] + [\"--no-admin-check\"])\n        try:\n            ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, params, None, 1)\n            print(\"--- Relaunched as admin, exiting current process ---\")\n            os._exit(0)\n        except Exception as e:\n            print(f\"--- Failed to relaunch as admin: {e} ---\")\n            show_critical_message(None, \"Admin Required\",\n                                  \"This application requires Administrator privileges. Please run as Administrator and try again.\")\n            os._exit(1)\n    else:\n        print(\"--- Already running as admin ---\")\n\n\nos.environ[\"QT_FONT_DPI\"] = \"96\"\n\noption_functions = {\n    \"Make A Restore Point\": AstreisFunc.make_restore_point,\n    \"Optimize Power Plan\": AstreisFunc.optimize_astreis_power_plan,\n    \"Adjust Appearance\": AstreisFunc.optimize_appearance,\n    \"Defragment Drives\": AstreisFunc.optimize_defrag,\n    \"Disable Startup Apps\": AstreisFunc.optimize_startup_apps,\n    \"Disable Unnecessary Services\": AstreisFunc.optimize_services,\n    \"Optimize Registry\": AstreisFunc.optimize_registry,\n    \"Classic Right Click Menu\": AstreisFunc.enable_classic_right_click,\n    \"Disable Search Index\": AstreisFunc.disable_search_index,\n    \"Open Desktop Utility\": AstreisFunc.run_windows_utility,\n    \"Clear Temporary Files\": AstreisFunc.placeholder,\n    \"Clean Recycle Bin\": AstreisFunc.placeholder,\n    \"Clean Browser Cache\": AstreisFunc.placeholder,\n    \"Clean System Logs\": AstreisFunc.placeholder,\n    \"Run Disk Cleanup\": AstreisFunc.placeholder,\n\n}\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n        settings = Settings()\n        self.settings = settings.items\n        self.hide_grips = True\n        self.current_left_tab = None\n        SetupMainWindow.setup_gui(self)\n        self.ui.left_column.btn_close.clicked.connect(self.close_left_column)\n        self.show()\n\n    def close_left_column(self):\n        if MainFunctions.left_column_is_visible(self):\n            MainFunctions.toggle_left_column(self)\n            self.ui.left_menu.deselect_all_tab()\n            self.current_left_tab = None\n\n    def btn_clicked(self):\n        btn = SetupMainWindow.setup_btns(self)\n        btn_name = btn.objectName()\n        if btn_name != \"btn_settings\" and btn_name != \"btn_info\":\n            self.ui.left_menu.deselect_all_tab()\n        if btn_name == \"btn_home\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        elif btn_name == \"btn_ai\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_2)\n        elif btn_name == \"btn_power\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_3)\n        elif btn_name in [\"btn_info\", \"btn_settings\"]:\n            is_visible = MainFunctions.left_column_is_visible(self)\n            if self.current_left_tab == btn_name and is_visible:\n                self.ui.left_menu.deselect_all_tab()\n                MainFunctions.toggle_left_column(self)\n                self.current_left_tab = None\n            else:\n                if not is_visible:\n                    MainFunctions.toggle_left_column(self)\n                self.ui.left_menu.select_only_one_tab(btn_name)\n                self.current_left_tab = btn_name\n                if btn_name == \"btn_info\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_2,\n                        title=\"Info tab\",\n                        icon_path=Functions.set_svg_icon(\"icon_info.svg\")\n                    )\n                elif btn_name == \"btn_settings\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_1,\n                        title=\"Astreis Optimizer\",\n                        icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n                    )\n        print(f\"Button {btn_name}, clicked!\")\n\n    def btn_released(self):\n        btn = SetupMainWindow.setup_btns(self)\n        print(f\"Button {btn.objectName()}, released!\")\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index < self.frame_stacked_widget.count() - 1:\n            self.frame_stacked_widget.setCurrentIndex(current_index + 1)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index > 0:\n            self.frame_stacked_widget.setCurrentIndex(current_index - 1)\n\n    def optimize_selected(self):\n        try:\n            print(\"Starting optimize_selected\")\n            themes = Themes().items\n            scroll_layouts = [\n                (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n                (self.clean_pc_scroll_layout, \"Clean PC\"),\n                (self.optimize_internet_scroll_layout, \"Optimize Internet\"),\n            ]\n            selected_options = []\n            results = []\n            for scroll_layout, category in scroll_layouts:\n                if not scroll_layout:\n                    print(f\"No layout for {category}\")\n                    continue\n                print(f\"Processing layout: {category}, count: {scroll_layout.count()}\")\n                for i in range(scroll_layout.count()):\n                    item = scroll_layout.itemAt(i)\n                    if not item:\n                        print(f\"No item at index {i} in {category}\")\n                        continue\n                    frame = item.widget()\n                    if not frame:\n                        print(f\"No widget at index {i} in {category}\")\n                        continue\n                    layout = frame.layout()\n                    if not layout:\n                        print(f\"No layout for frame at index {i} in {category}\")\n                        continue\n                    toggle_layout = layout.itemAt(layout.count() - 1)\n                    if not toggle_layout or not toggle_layout.layout():\n                        print(f\"No toggle layout at index {i} in {category}\")\n                        continue\n                    toggle = toggle_layout.layout().itemAt(1).widget()\n                    title = layout.itemAt(0).widget().text()\n                    print(f\"Found option: {title} in {category}, checked: {toggle.isChecked()}\")\n                    if toggle.isChecked() and (title, category) not in selected_options:\n                        selected_options.append((title, category))\n            if selected_options:\n                print(f\"Optimizing: {', '.join([f'{title} ({cat})' for title, cat in selected_options])}\")\n                self.progress_dialog = QProgressDialog(\"Running optimizations...\", \"Cancel\", 0, 100, self)\n                self.progress_dialog.setWindowTitle(\"Optimization Progress\")\n                self.progress_dialog.setMinimumSize(500, 150)\n                self.progress_dialog.setStyleSheet(f\"\"\"\n                    QProgressDialog {{\n                        background-color: {themes['app_color']['dark_one']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 10px;\n                        font-family: 'Segoe UI';\n                        font-size: 12pt;\n                    }}\n                    QProgressBar {{\n                        background-color: {themes['app_color']['dark_two']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 8px;\n                        text-align: center;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-height: 25px;\n                    }}\n                    QProgressBar::chunk {{\n                        background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                            stop:0 {themes['app_color']['context_color']},\n                            stop:1 {themes['app_color']['context_hover']});\n                        border-radius: 6px;\n                        margin: 2px;\n                    }}\n                    QPushButton {{\n                        background-color: {themes['app_color']['context_color']};\n                        color: #FFFFFF;\n                        border: none;\n                        border-radius: 6px;\n                        padding: 8px 16px;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-width: 80px;\n                    }}\n                    QPushButton:hover {{\n                        background-color: {themes['app_color']['context_hover']};\n                    }}\n                    QPushButton:pressed {{\n                        background-color: {themes['app_color']['context_pressed']};\n                    }}\n                    QPushButton:disabled {{\n                        background-color: #555555;\n                        color: #FFFFFF;\n                    }}\n                    QLabel {{\n                        color: {themes['app_color']['text_foreground']};\n                        font-size: 11pt;\n                        font-weight: bold;\n                        padding: 5px;\n                    }}\n                \"\"\")\n                self.progress_dialog.setModal(True)\n                self.progress_dialog.setAutoClose(False)\n                self.progress_dialog.setAutoReset(False)\n                self.progress_dialog.canceled.connect(self.on_cancel)\n                self.optimization_thread = QThread(self)\n                self.optimization_worker = OptimizationWorker(selected_options, option_functions)\n                self.optimization_worker.moveToThread(self.optimization_thread)\n                self.optimization_worker.progress_update.connect(self.on_progress_update)\n                self.optimization_worker.result_ready.connect(self.on_result_ready)\n                self.optimization_thread.started.connect(self.optimization_worker.run)\n                self.optimization_worker.finished.connect(self.on_optimization_finished)\n                self.optimization_worker.finished.connect(self.optimization_thread.quit)\n                self.optimization_worker.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_thread.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_results = []\n                self.progress_dialog.show()\n                self.optimization_thread.start()\n            else:\n                print(\"No options selected\")\n                show_info_message(self, \"No Options Selected\", \"Please select at least one optimization option.\")\n        except Exception as e:\n            print(f\"Error in optimize_selected: {str(e)}\")\n            show_critical_message(self, \"Error\", f\"An error occurred in optimize_selected: {str(e)}\")\n\n    def on_progress_update(self, value, text):\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setValue(value)\n            self.progress_dialog.setLabelText(text)\n\n    def on_result_ready(self, result, success):\n        self.optimization_results.append(result)\n\n    def on_cancel(self):\n        if hasattr(self, 'optimization_worker'):\n            self.optimization_worker.stop()\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setLabelText(\"Cancelling...\")\n            self.progress_dialog.setEnabled(False)\n\n    def on_optimization_finished(self):\n        print(\"--- Worker has finished, preparing to show results. ---\")\n        if hasattr(self, 'progress_dialog') and self.progress_dialog.isVisible():\n            self.progress_dialog.close()\n        QTimer.singleShot(100, self.show_completion_dialog)\n\n    def show_completion_dialog(self):\n        themes = Themes().items\n        msg_box = PyMessageBox(self)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        result_text = \"Optimization tasks completed:\\n\\n\" + \"\\n\".join(self.optimization_results)\n        msg_box.setText(result_text)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def resizeEvent(self, event):\n        super().resizeEvent(event)\n\n    def mousePressEvent(self, event):\n        self.dragPos = event.globalPosition().toPoint()\n\n    def toggle_advanced(self, button):\n        if self.advanced_scroll_area.isVisible():\n            self.advanced_scroll_area.setVisible(False)\n            button.setText(\"Advanced\")\n        else:\n            self.advanced_scroll_area.setVisible(True)\n            button.setText(\"Basic\")\n\n    def setup_ai(self):\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n\n\nclass OptimizationWorker(QObject):\n    finished = Signal()\n    result_ready = Signal(str, bool)\n    progress_update = Signal(int, str)\n\n    def __init__(self, selected_options, option_functions):\n        super().__init__()\n        self.selected_options = selected_options\n        self.option_functions = option_functions\n        self._running = True\n\n    def stop(self):\n        self._running = False\n\n    def run(self):\n        total_options = len(self.selected_options)\n        for i, (title, category) in enumerate(self.selected_options):\n            if not self._running:\n                break\n            progress_percent = int(((i + 0.5) / total_options) * 100)\n            print(f\"Worker: Starting {title} ({category})\")\n            self.progress_update.emit(progress_percent, f\"Running: {title}...\")\n            if title in self.option_functions:\n                try:\n                    success, message = self.option_functions[title]()\n                    print(f\"Worker: {title} returned (success: {success}, message: {message})\")\n                    if success:\n                        result_msg = f\"{title}: {message}\"\n                    else:\n                        result_msg = f\"{title}: Skipped - {message}\"\n                    self.result_ready.emit(result_msg, success)\n                except Exception as e:\n                    print(f\"Worker: {title} failed with error: {str(e)}\")\n                    result_msg = f\"{title}: Skipped due to error - {str(e)}\"\n                    self.result_ready.emit(result_msg, False)\n        self.progress_update.emit(100, \"Optimization Complete\")\n        self.finished.emit()\n\n\nif __name__ == \"__main__\":\n    instance_socket = check_single_instance()\n    if not instance_socket:\n        print(\"--- Another instance is already running, exiting ---\")\n        sys.exit(0)\n    run_as_admin()\n    try:\n        print(\"--- Creating QApplication ---\")\n        app = QApplication(sys.argv)\n        app.setWindowIcon(QIcon(\"icon.ico\"))\n        print(\"--- Creating MainWindow ---\")\n        window = MainWindow()\n        print(\"--- Starting event loop (app.exec()) ---\")\n        exit_code = app.exec()\n        print(f\"--- Event loop finished with exit code: {exit_code} ---\")\n        instance_socket.close()\n        sys.exit(exit_code)\n    except Exception as e:\n        print(f\"--- An unhandled exception occurred: {e} ---\")\n        import traceback\n\n        traceback.print_exc()\n        show_critical_message(None, \"Fatal Error\", f\"A fatal error occurred and the application must close:\\n\\n{e}\")\n        input(\"Press Enter to exit...\")\n    finally:\n        print(\"--- Script Exiting ---\")\n        time.sleep(2)"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui\\API_KEY.env",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\API_KEY.env",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\requires.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\requires.txt",
                        "sources": []
                    },
                    {
                        "path": "requirements.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\requirements.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\SOURCES.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\SOURCES.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\entry_points.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\entry_points.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\top_level.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\top_level.txt",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "README.md",
                        "fsPath": "README.md"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "import functools\nimport sys\nimport os\nimport time\nimport ctypes\nfrom PySide6.QtCore import QTimer, QThread, QObject, Signal\nfrom PySide6.QtWidgets import QMainWindow, QProgressDialog, QMessageBox, QApplication\nfrom PySide6.QtGui import QIcon\nfrom gui.core.json_settings import Settings\nfrom gui.core.json_themes import Themes\nfrom gui.core.functions import Functions\nfrom gui.uis.windows.main_window import *\nfrom gui.uis.windows.main_window.functions_main_window import *\nfrom gui.widgets import *\nfrom gui.uis.windows.main_window.AstreisFunc import AstreisFunc\nfrom gui.widgets.py_message_box import PyMessageBox, show_info_message, show_critical_message\nimport socket\n\nprint(\"--- Script Starting ---\")\n\n\ndef check_single_instance(port=65432):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.bind((\"127.0.0.1\", port))\n        s.listen(1)\n        return s\n    except socket.error:\n        return None\n\n\ndef run_as_admin():\n    if \"--no-admin-check\" in sys.argv:\n        print(\"--- Skipping admin check due to --no-admin-check flag ---\")\n        return\n    if not ctypes.windll.shell32.IsUserAnAdmin():\n        print(\"--- Not running as admin, relaunching with elevated privileges ---\")\n        params = ' '.join([f'\"{arg}\"' for arg in sys.argv if arg != \"--no-admin-check\"] + [\"--no-admin-check\"])\n        try:\n            ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, params, None, 1)\n            print(\"--- Relaunched as admin, exiting current process ---\")\n            os._exit(0)\n        except Exception as e:\n            print(f\"--- Failed to relaunch as admin: {e} ---\")\n            show_critical_message(None, \"Admin Required\",\n                                  \"This application requires Administrator privileges. Please run as Administrator and try again.\")\n            os._exit(1)\n    else:\n        print(\"--- Already running as admin ---\")\n\n\nos.environ[\"QT_FONT_DPI\"] = \"96\"\n\noption_functions = {\n    \"Make A Restore Point\": AstreisFunc.make_restore_point,\n    \"Optimize Power Plan\": AstreisFunc.optimize_astreis_power_plan,\n    \"Adjust Appearance\": AstreisFunc.optimize_appearance,\n    \"Defragment Drives\": AstreisFunc.optimize_defrag,\n    \"Disable Startup Apps\": AstreisFunc.optimize_startup_apps,\n    \"Disable Unnecessary Services\": AstreisFunc.optimize_services,\n    \"Optimize Registry\": AstreisFunc.optimize_registry,\n    \"Classic Right Click Menu\": AstreisFunc.enable_classic_right_click,\n    \"Disable Search Index\": AstreisFunc.disable_search_index,\n    \"Open Desktop Utility\": AstreisFunc.run_windows_utility,\n    \"Clear Temporary Files\": AstreisFunc.placeholder,\n    \"Clean Recycle Bin\": AstreisFunc.placeholder,\n    \"Clean Browser Cache\": AstreisFunc.placeholder,\n    \"Clean System Logs\": AstreisFunc.placeholder,\n    \"Run Disk Cleanup\": AstreisFunc.placeholder,\n\n}\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = UI_MainWindow()\n        self.ui.setup_ui(self)\n        settings = Settings()\n        self.settings = settings.items\n        self.hide_grips = True\n        self.current_left_tab = None\n        SetupMainWindow.setup_gui(self)\n        self.ui.left_column.btn_close.clicked.connect(self.close_left_column)\n        self.show()\n\n    def close_left_column(self):\n        if MainFunctions.left_column_is_visible(self):\n            MainFunctions.toggle_left_column(self)\n            self.ui.left_menu.deselect_all_tab()\n            self.current_left_tab = None\n\n    def btn_clicked(self):\n        btn = SetupMainWindow.setup_btns(self)\n        btn_name = btn.objectName()\n        if btn_name != \"btn_settings\" and btn_name != \"btn_info\":\n            self.ui.left_menu.deselect_all_tab()\n        if btn_name == \"btn_home\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_1)\n        elif btn_name == \"btn_ai\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_2)\n        elif btn_name == \"btn_power\":\n            self.ui.left_menu.select_only_one(btn_name)\n            MainFunctions.set_page(self, self.ui.load_pages.page_3)\n        elif btn_name in [\"btn_info\", \"btn_settings\"]:\n            is_visible = MainFunctions.left_column_is_visible(self)\n            if self.current_left_tab == btn_name and is_visible:\n                self.ui.left_menu.deselect_all_tab()\n                MainFunctions.toggle_left_column(self)\n                self.current_left_tab = None\n            else:\n                if not is_visible:\n                    MainFunctions.toggle_left_column(self)\n                self.ui.left_menu.select_only_one_tab(btn_name)\n                self.current_left_tab = btn_name\n                if btn_name == \"btn_info\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_2,\n                        title=\"Info tab\",\n                        icon_path=Functions.set_svg_icon(\"icon_info.svg\")\n                    )\n                elif btn_name == \"btn_settings\":\n                    MainFunctions.set_left_column_menu(\n                        self,\n                        menu=self.ui.left_column.menus.menu_1,\n                        title=\"Astreis Optimizer\",\n                        icon_path=Functions.set_svg_icon(\"icon_settings.svg\")\n                    )\n        print(f\"Button {btn_name}, clicked!\")\n\n    def btn_released(self):\n        btn = SetupMainWindow.setup_btns(self)\n        print(f\"Button {btn.objectName()}, released!\")\n\n    def switch_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index < self.frame_stacked_widget.count() - 1:\n            self.frame_stacked_widget.setCurrentIndex(current_index + 1)\n\n    def prev_frame(self):\n        current_index = self.frame_stacked_widget.currentIndex()\n        if current_index > 0:\n            self.frame_stacked_widget.setCurrentIndex(current_index - 1)\n\n    def optimize_selected(self):\n        try:\n            print(\"Starting optimize_selected\")\n            themes = Themes().items\n            scroll_layouts = [\n                (self.optimize_pc_scroll_layout, \"Optimize PC\"),\n                (self.clean_pc_scroll_layout, \"Clean PC\"),\n                (self.optimize_internet_scroll_layout, \"Optimize Internet\"),\n            ]\n            selected_options = []\n            results = []\n            for scroll_layout, category in scroll_layouts:\n                if not scroll_layout:\n                    print(f\"No layout for {category}\")\n                    continue\n                print(f\"Processing layout: {category}, count: {scroll_layout.count()}\")\n                for i in range(scroll_layout.count()):\n                    item = scroll_layout.itemAt(i)\n                    if not item:\n                        print(f\"No item at index {i} in {category}\")\n                        continue\n                    frame = item.widget()\n                    if not frame:\n                        print(f\"No widget at index {i} in {category}\")\n                        continue\n                    layout = frame.layout()\n                    if not layout:\n                        print(f\"No layout for frame at index {i} in {category}\")\n                        continue\n                    toggle_layout = layout.itemAt(layout.count() - 1)\n                    if not toggle_layout or not toggle_layout.layout():\n                        print(f\"No toggle layout at index {i} in {category}\")\n                        continue\n                    toggle = toggle_layout.layout().itemAt(1).widget()\n                    title = layout.itemAt(0).widget().text()\n                    print(f\"Found option: {title} in {category}, checked: {toggle.isChecked()}\")\n                    if toggle.isChecked() and (title, category) not in selected_options:\n                        selected_options.append((title, category))\n            if selected_options:\n                print(f\"Optimizing: {', '.join([f'{title} ({cat})' for title, cat in selected_options])}\")\n                self.progress_dialog = QProgressDialog(\"Running optimizations...\", \"Cancel\", 0, 100, self)\n                self.progress_dialog.setWindowTitle(\"Optimization Progress\")\n                self.progress_dialog.setMinimumSize(500, 150)\n                self.progress_dialog.setStyleSheet(f\"\"\"\n                    QProgressDialog {{\n                        background-color: {themes['app_color']['dark_one']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 10px;\n                        font-family: 'Segoe UI';\n                        font-size: 12pt;\n                    }}\n                    QProgressBar {{\n                        background-color: {themes['app_color']['dark_two']};\n                        color: {themes['app_color']['text_foreground']};\n                        border: 2px solid {themes['app_color']['context_color']};\n                        border-radius: 8px;\n                        text-align: center;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-height: 25px;\n                    }}\n                    QProgressBar::chunk {{\n                        background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n                            stop:0 {themes['app_color']['context_color']},\n                            stop:1 {themes['app_color']['context_hover']});\n                        border-radius: 6px;\n                        margin: 2px;\n                    }}\n                    QPushButton {{\n                        background-color: {themes['app_color']['context_color']};\n                        color: #FFFFFF;\n                        border: none;\n                        border-radius: 6px;\n                        padding: 8px 16px;\n                        font-weight: bold;\n                        font-size: 11pt;\n                        min-width: 80px;\n                    }}\n                    QPushButton:hover {{\n                        background-color: {themes['app_color']['context_hover']};\n                    }}\n                    QPushButton:pressed {{\n                        background-color: {themes['app_color']['context_pressed']};\n                    }}\n                    QPushButton:disabled {{\n                        background-color: #555555;\n                        color: #FFFFFF;\n                    }}\n                    QLabel {{\n                        color: {themes['app_color']['text_foreground']};\n                        font-size: 11pt;\n                        font-weight: bold;\n                        padding: 5px;\n                    }}\n                \"\"\")\n                self.progress_dialog.setModal(True)\n                self.progress_dialog.setAutoClose(False)\n                self.progress_dialog.setAutoReset(False)\n                self.progress_dialog.canceled.connect(self.on_cancel)\n                self.optimization_thread = QThread(self)\n                self.optimization_worker = OptimizationWorker(selected_options, option_functions)\n                self.optimization_worker.moveToThread(self.optimization_thread)\n                self.optimization_worker.progress_update.connect(self.on_progress_update)\n                self.optimization_worker.result_ready.connect(self.on_result_ready)\n                self.optimization_thread.started.connect(self.optimization_worker.run)\n                self.optimization_worker.finished.connect(self.on_optimization_finished)\n                self.optimization_worker.finished.connect(self.optimization_thread.quit)\n                self.optimization_worker.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_thread.finished.connect(self.optimization_worker.deleteLater)\n                self.optimization_results = []\n                self.progress_dialog.show()\n                self.optimization_thread.start()\n            else:\n                print(\"No options selected\")\n                show_info_message(self, \"No Options Selected\", \"Please select at least one optimization option.\")\n        except Exception as e:\n            print(f\"Error in optimize_selected: {str(e)}\")\n            show_critical_message(self, \"Error\", f\"An error occurred in optimize_selected: {str(e)}\")\n\n    def on_progress_update(self, value, text):\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setValue(value)\n            self.progress_dialog.setLabelText(text)\n\n    def on_result_ready(self, result, success):\n        self.optimization_results.append(result)\n\n    def on_cancel(self):\n        if hasattr(self, 'optimization_worker'):\n            self.optimization_worker.stop()\n        if hasattr(self, 'progress_dialog'):\n            self.progress_dialog.setLabelText(\"Cancelling...\")\n            self.progress_dialog.setEnabled(False)\n\n    def on_optimization_finished(self):\n        print(\"--- Worker has finished, preparing to show results. ---\")\n        if hasattr(self, 'progress_dialog') and self.progress_dialog.isVisible():\n            self.progress_dialog.close()\n        QTimer.singleShot(100, self.show_completion_dialog)\n\n    def show_completion_dialog(self):\n        themes = Themes().items\n        msg_box = PyMessageBox(self)\n        msg_box.setWindowTitle(\"Optimization Complete\")\n        msg_box.setMinimumSize(600, 400)\n        result_text = \"Optimization tasks completed:\\n\\n\" + \"\\n\".join(self.optimization_results)\n        msg_box.setText(result_text)\n        msg_box.setStandardButtons(QMessageBox.Ok)\n        msg_box.show()\n\n    def resizeEvent(self, event):\n        super().resizeEvent(event)\n\n    def mousePressEvent(self, event):\n        self.dragPos = event.globalPosition().toPoint()\n\n    def toggle_advanced(self, button):\n        if self.advanced_scroll_area.isVisible():\n            self.advanced_scroll_area.setVisible(False)\n            button.setText(\"Advanced\")\n        else:\n            self.advanced_scroll_area.setVisible(True)\n            button.setText(\"Basic\")\n\n    def setup_ai(self):\n        self.input_field.returnPressed.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n        self.send_button.clicked.connect(\n            lambda: AstreisFunc.send_message(self.input_field, self.scroll_y, self.themes))\n\n\nclass OptimizationWorker(QObject):\n    finished = Signal()\n    result_ready = Signal(str, bool)\n    progress_update = Signal(int, str)\n\n    def __init__(self, selected_options, option_functions):\n        super().__init__()\n        self.selected_options = selected_options\n        self.option_functions = option_functions\n        self._running = True\n\n    def stop(self):\n        self._running = False\n\n    def run(self):\n        total_options = len(self.selected_options)\n        for i, (title, category) in enumerate(self.selected_options):\n            if not self._running:\n                break\n            progress_percent = int(((i + 0.5) / total_options) * 100)\n            print(f\"Worker: Starting {title} ({category})\")\n            self.progress_update.emit(progress_percent, f\"Running: {title}...\")\n            if title in self.option_functions:\n                try:\n                    success, message = self.option_functions[title]()\n                    print(f\"Worker: {title} returned (success: {success}, message: {message})\")\n                    if success:\n                        result_msg = f\"{title}: {message}\"\n                    else:\n                        result_msg = f\"{title}: Skipped - {message}\"\n                    self.result_ready.emit(result_msg, success)\n                except Exception as e:\n                    print(f\"Worker: {title} failed with error: {str(e)}\")\n                    result_msg = f\"{title}: Skipped due to error - {str(e)}\"\n                    self.result_ready.emit(result_msg, False)\n        self.progress_update.emit(100, \"Optimization Complete\")\n        self.finished.emit()\n\n\nif __name__ == \"__main__\":\n    instance_socket = check_single_instance()\n    if not instance_socket:\n        print(\"--- Another instance is already running, exiting ---\")\n        sys.exit(0)\n    run_as_admin()\n    try:\n        print(\"--- Creating QApplication ---\")\n        app = QApplication(sys.argv)\n        app.setWindowIcon(QIcon(\"icon.ico\"))\n        print(\"--- Creating MainWindow ---\")\n        window = MainWindow()\n        print(\"--- Starting event loop (app.exec()) ---\")\n        exit_code = app.exec()\n        print(f\"--- Event loop finished with exit code: {exit_code} ---\")\n        instance_socket.close()\n        sys.exit(exit_code)\n    except Exception as e:\n        print(f\"--- An unhandled exception occurred: {e} ---\")\n        import traceback\n\n        traceback.print_exc()\n        show_critical_message(None, \"Fatal Error\", f\"A fatal error occurred and the application must close:\\n\\n{e}\")\n        input(\"Press Enter to exit...\")\n    finally:\n        print(\"--- Script Exiting ---\")\n        time.sleep(2)"
                    },
                    {
                        "path": "README.md",
                        "fsPath": "README.md"
                    }
                ]
            },
            "createdAt": 1751032171463,
            "isInternal": false
        },
        {
            "id": "5b080768-3c90-40e2-a214-bb7b74a528cb",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Found option: Flush DNS Cache in Optimize Internet, checked: False"
                },
                {
                    "type": "text",
                    "text": "Found option: Optimize Network Adapters in Optimize Internet, checked: False"
                },
                {
                    "type": "text",
                    "text": "Optimizing: Run Debloat Utility (Clean PC)"
                },
                {
                    "type": "text",
                    "text": "Worker: Starting Run Debloat Utility (Clean PC)"
                },
                {
                    "type": "text",
                    "text": ")) was unexpected at this time."
                },
                {
                    "type": "text",
                    "text": "Failed to run debloat script: Command 'powershell -NoProfile -ExecutionPolicy Bypass -Command & ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))' returned non-zero exit status 1."
                },
                {
                    "type": "text",
                    "text": "Worker: Run Debloat Utility failed with error: cannot unpack non-iterable NoneType object"
                },
                {
                    "type": "text",
                    "text": "--- Worker has finished, preparing to show results. ---"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\columns\\left_column.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\columns\\left_column.ui",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "settings.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\settings.json",
                        "sources": []
                    },
                    {
                        "path": "requirements.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\requirements.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\requires.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\requires.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ]
            },
            "createdAt": 1751033234594,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Found option: Flush DNS Cache in Optimize Internet, checked: False"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Found option: Optimize Network Adapters in Optimize Internet, checked: False"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Optimizing: Run Debloat Utility (Clean PC)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Worker: Starting Run Debloat Utility (Clean PC)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": ")) was unexpected at this time."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Failed to run debloat script: Command 'powershell -NoProfile -ExecutionPolicy Bypass -Command & ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))' returned non-zero exit status 1."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Worker: Run Debloat Utility failed with error: cannot unpack non-iterable NoneType object"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "--- Worker has finished, preparing to show results. ---"
                            }
                        ]
                    },
                    {
                        "type": "paragraph"
                    }
                ]
            }
        },
        {
            "id": "7d519932-fca5-4ec5-99e6-083b39c3f538",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "The error you're encountering during the \"Run Debloat Utility\" task seems to be related to executing a PowerShell script via a subprocess call. Here's a breakdown of the issue and potential solutions:\n\n### Error Analysis\n\n1. **Error Message**:\n   - The error message indicates that the command to run the debloat script returned a non-zero exit status, which means the command failed to execute successfully.\n   - The specific error `)) was unexpected at this time.` suggests a syntax issue in the PowerShell command or script being executed.\n\n2. **Command Execution**:\n   - The command being executed is: \n     ```shell\n     powershell -NoProfile -ExecutionPolicy Bypass -Command & ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))\n     ```\n   - This command attempts to download and execute a script from the URL using `Invoke-RestMethod` (`irm`).\n\n3. **Potential Causes**:\n   - **Network Issues**: The script might not be accessible due to network restrictions or the URL being incorrect.\n   - **Syntax Errors**: There might be a syntax error in the command or the script being fetched.\n   - **Execution Policy**: Although the command uses `-ExecutionPolicy Bypass`, local policy settings might still interfere.\n\n### Solutions\n\n1. **Check Network Access**:\n   - Ensure that the machine running the script has internet access and can reach the URL `https://debloat.raphi.re/`.\n\n2. **Verify URL and Script**:\n   - Manually check the URL in a browser to ensure it's correct and accessible.\n   - If possible, download the script and inspect it for syntax errors.\n\n3. **Modify the Command**:\n   - Test the command directly in a PowerShell terminal to see if it executes without errors.\n   - Consider simplifying the command for testing purposes, such as downloading the script first and then executing it separately.\n\n4. **Error Handling**:\n   - Update the `AstreisFunc` class to handle errors more gracefully. For example, log detailed error messages and provide user-friendly feedback.\n\n5. **Local Execution**:\n   - If the script is stable and frequently used, consider hosting it locally or embedding it within the application to avoid network dependencies.\n\n### Code Adjustment\n\nIn the `AstreisFunc` class, ensure that the subprocess call is wrapped in a try-except block to catch and handle exceptions more effectively. Here's an example of how you might adjust the code:\n\n```python\n@staticmethod\ndef run_debloat_utility():\n    try:\n        command = 'powershell -NoProfile -ExecutionPolicy Bypass -Command & ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n        if result.returncode == 0:\n            return (True, \"Debloat utility ran successfully.\")\n        else:\n            return (False, f\"Debloat utility failed with exit code {result.returncode}.\")\n    except subprocess.CalledProcessError as e:\n        return (False, f\"Failed to run debloat utility. Error: {e.stderr}\")\n    except Exception as e:\n        return (False, f\"An unexpected error occurred: {e}\")\n```\n\nThis adjustment includes better error handling and logging, which can help diagnose issues more effectively."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\columns\\left_column.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\columns\\left_column.ui",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\pages\\main_pages.ui",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\pages\\main_pages.ui",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "settings.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\settings.json",
                        "sources": []
                    },
                    {
                        "path": "requirements.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\requirements.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\requires.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\requires.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ]
            },
            "createdAt": 1751033260644,
            "isInternal": false
        },
        {
            "id": "27a0ddff-0e3e-481b-b625-f09370eb4fbc",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "skipped due to error - cannot unpack non-iterable NoneType object: @staticmethod\ndef empty_recycle_bin():\n    try:\n        ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n        print(\"Recycle Bin emptied.\")\n    except Exception as e:\n        print(f\"Failed to empty Recycle Bin: {e}\")"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": []
                    },
                    {
                        "path": "requirements.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\requirements.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\requires.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\requires.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "settings.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\settings.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\functions.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\functions.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ]
            },
            "createdAt": 1751034550633,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "skipped due to error - cannot unpack non-iterable NoneType object: @staticmethod\ndef empty_recycle_bin():\n    try:\n        ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n        print(\"Recycle Bin emptied.\")\n    except Exception as e:\n        print(f\"Failed to empty Recycle Bin: {e}\")"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "541807c0-a86d-4c09-815e-be94b81799e4",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "The error message \"cannot unpack non-iterable NoneType object\" indicates that a function expected to return a tuple is instead returning `None`. This typically happens when a function does not have a return statement or the return statement is not executed due to an error.\n\n### Problematic Function\n\nThe function `empty_recycle_bin` is defined as follows:\n\n```python\n@staticmethod\ndef empty_recycle_bin():\n    try:\n        ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n        print(\"Recycle Bin emptied.\")\n    except Exception as e:\n        print(f\"Failed to empty Recycle Bin: {e}\")\n```\n\n### Issue\n\n- The function `empty_recycle_bin` does not return any value, which means it implicitly returns `None`.\n- In the context where this function is called, it seems to be expected to return a tuple, likely indicating success and a message.\n\n### Solution\n\nModify the `empty_recycle_bin` function to return a tuple indicating the success of the operation and an appropriate message. Here's how you can adjust the function:\n\n```python\n@staticmethod\ndef empty_recycle_bin():\n    try:\n        ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n        print(\"Recycle Bin emptied.\")\n        return (True, \"Recycle Bin emptied successfully.\")\n    except Exception as e:\n        error_message = f\"Failed to empty Recycle Bin: {e}\"\n        print(error_message)\n        return (False, error_message)\n```\n\n### Explanation\n\n- **Return Tuple**: The function now returns a tuple `(True, \"Recycle Bin emptied successfully.\")` if the operation is successful.\n- **Error Handling**: If an exception occurs, it returns `(False, error_message)`, where `error_message` contains details about the failure.\n\n### Additional Considerations\n\n- **Consistent Return Types**: Ensure all functions in `AstreisFunc` that are used in `option_functions` return a tuple with a success flag and a message.\n- **Error Logging**: Consider logging errors to a file for easier debugging and user feedback.\n\nBy making these changes, you should resolve the unpacking error and improve the robustness of the function calls in your application."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": []
                    },
                    {
                        "path": "gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": []
                    },
                    {
                        "path": "Astreis.spec",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.spec",
                        "sources": []
                    },
                    {
                        "path": "build.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\build.py",
                        "sources": []
                    },
                    {
                        "path": "requirements.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\requirements.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\requires.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\requires.txt",
                        "sources": []
                    },
                    {
                        "path": "Astreis.egg-info\\dependency_links.txt",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\Astreis.egg-info\\dependency_links.txt",
                        "sources": []
                    },
                    {
                        "path": "README.md",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\README.md",
                        "sources": []
                    },
                    {
                        "path": "settings.json",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\settings.json",
                        "sources": []
                    },
                    {
                        "path": "gui\\core\\functions.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\core\\functions.py",
                        "sources": []
                    },
                    {
                        "path": "main.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\main.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/setup_main_window.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\setup_main_window.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "gui/uis/windows/main_window/AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "fsPath": "D:\\Programming\\PycharmProjects\\Astreis\\gui\\uis\\windows\\main_window\\AstreisFunc.py",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "# =============================================================================\n# IMPORTS AND DEPENDENCIES\n# =============================================================================\nimport os\nimport shutil\nimport subprocess\nimport winreg\nimport psutil\nimport sqlite3\nfrom win32com.shell import shell, shellcon\nfrom groq import Groq\nfrom gui.core.qt_core import *\nimport ctypes\nimport sys\nimport wmi\nimport win32com.client\nimport win32api\nimport win32con\nimport win32security\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport struct\nimport time\nimport datetime\nimport tempfile\nimport glob\nimport re\nfrom pathlib import Path\n\n# =============================================================================\n# ASTREIS FUNCTIONALITY CLASS\n# =============================================================================\nclass AstreisFunc:\n    _chat_history = []\n\n    def __init__(self):\n        pass\n\n    # =============================================================================\n    # CHAT HISTORY MANAGEMENT\n    # =============================================================================\n    @staticmethod\n    def clear_history():\n        AstreisFunc._chat_history = []\n\n    @staticmethod\n    def get_history():\n        return AstreisFunc._chat_history.copy()\n\n    # =============================================================================\n    # AI CHAT FUNCTIONALITY\n    # =============================================================================\n    @staticmethod\n    def send_message(input_field, scroll_layout, themes):\n        from PySide6.QtCore import QTimer\n        from PySide6.QtWidgets import QLabel, QScrollArea\n        from groq import Groq\n        client = Groq(api_key='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')\n        user_input = input_field.text()\n        if not user_input.strip():\n            return\n        user_message = QLabel(f\"You: {user_input}\")\n        user_message.setStyleSheet(\n            f\"font: 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #343B48; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        user_message.setWordWrap(True)\n        scroll_layout.addWidget(user_message)\n        AstreisFunc._chat_history.append({\"role\": \"user\", \"content\": user_input})\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Astreis, a friendly and expert AI assistant integrated into the Astreis PC Optimizer application. Your goal is to help users with PC optimization. Provide clear, concise, and practical advice. You can answer questions about improving computer performance, managing resources, and troubleshooting common issues for Windows systems.\"\n            }\n        ]\n        messages.extend(AstreisFunc._chat_history[-10:])\n        ai_response = QLabel(\"AI: \")\n        ai_response.setStyleSheet(\n            f\"font: bold 12pt 'Segoe UI'; color: {themes['app_color']['text_description']}; \"\n            \"background-color: #2A2F3B; border-radius: 10px; padding: 10px; margin: 5px;\"\n        )\n        ai_response.setWordWrap(True)\n        scroll_layout.addWidget(ai_response)\n        try:\n            completion = client.chat.completions.create(\n                model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n                messages=messages,\n                temperature=1,\n                max_completion_tokens=1024,\n                top_p=1,\n                stream=True,\n                stop=None,\n            )\n            full_response = \"\"\n            response_chunks = [chunk.choices[0].delta.content or \"\" for chunk in completion]\n            def stream_text(index=0):\n                nonlocal full_response\n                try:\n                    if index < len(response_chunks):\n                        full_response += response_chunks[index]\n                        ai_response.setText(f\"AI: {full_response}\")\n                        scroll_area = scroll_layout.parent()\n                        while scroll_area and not isinstance(scroll_area, QScrollArea):\n                            scroll_area = scroll_area.parent()\n                        if scroll_area:\n                            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n                        QTimer.singleShot(50, lambda: stream_text(index + 1))\n                    else:\n                        AstreisFunc._chat_history.append({\"role\": \"assistant\", \"content\": full_response})\n                except RuntimeError:\n                    print(\"AI response label was deleted during streaming. Halting.\")\n            QTimer.singleShot(50, lambda: stream_text())\n        except Exception as e:\n            ai_response.setText(\"AI: Error connecting to the service.\")\n            print(f\"[ERROR] {e}\")\n        input_field.clear()\n        scroll_area = scroll_layout.parent()\n        while scroll_area and not isinstance(scroll_area, QScrollArea):\n            scroll_area = scroll_area.parent()\n        if scroll_area:\n            scroll_area.verticalScrollBar().setValue(scroll_area.verticalScrollBar().maximum())\n\n    @staticmethod\n    def optimize_startup_apps():\n        print(\"Disabling startup applications...\")\n        startup_keys = [\n            (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n            (winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\"),\n        ]\n        \n        backup_dir = \"backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        disabled_count = 0\n        key_details = []\n\n        for hkey, subkey_path in startup_keys:\n            try:\n                # Backup the key first\n                key_name = \"HKCU\" if hkey == winreg.HKEY_CURRENT_USER else \"HKLM\"\n                backup_file = os.path.join(backup_dir, f\"startup_{key_name}_run_backup_{int(time.time())}.reg\")\n                subprocess.run(['reg', 'export', f'{\"HKEY_CURRENT_USER\" if hkey == winreg.HKEY_CURRENT_USER else \"HKEY_LOCAL_MACHINE\"}\\\\{subkey_path}', backup_file, '/y'], check=True)\n                print(f\"Backed up {key_name}\\\\{subkey_path} to {backup_file}\")\n\n                # Clear the keys\n                with winreg.OpenKey(hkey, subkey_path, 0, winreg.KEY_ALL_ACCESS) as regkey:\n                    while True:\n                        try:\n                            value_name, _, _ = winreg.EnumValue(regkey, 0)\n                            winreg.DeleteValue(regkey, value_name)\n                            disabled_count += 1\n                            print(f\"Disabled startup item: {value_name}\")\n                        except OSError:\n                            break # No more values\n                    key_details.append(f\"{key_name}\\\\{subkey_path}\")\n\n            except FileNotFoundError:\n                print(f\"Startup key not found: {subkey_path}\")\n                continue\n            except Exception as e:\n                print(f\"Error processing startup key {subkey_path}: {e}\")\n                return (False, f\"Error processing startup key: {e}\")\n\n        if disabled_count > 0:\n            return (True, f\"Disabled {disabled_count} startup items. Backups created in the backups folder.\")\n        else:\n            return (True, \"No startup items found to disable.\")\n\n    @staticmethod\n    def optimize_services():\n        print(\"Disabling unnecessary services using low-level API...\")\n        \n        services_to_disable = [\n            (\"diagtrack\", \"Connected User Experiences and Telemetry\"),\n            (\"dmwappushservice\", \"Device Management Wireless Application Protocol (WAP) Push message Routing Service\"),\n            (\"Fax\", \"Fax Service\"),\n            (\"Spooler\", \"Print Spooler\"),\n            (\"RemoteRegistry\", \"Remote Registry\"),\n            (\"TabletInputService\", \"Touch Keyboard and Handwriting Panel\"),\n            (\"WbioSrvc\", \"Windows Biometric Service\"),\n            (\"StiSvc\", \"Windows Image Acquisition (WIA)\"),\n            (\"iphlpsvc\", \"IP Helper\"),\n            (\"AJRouter\", \"AllJoyn Router Service\"),\n            (\"wisvc\", \"Windows Insider Service\"),\n            (\"PcaSvc\", \"Program Compatibility Assistant Service\"),\n            (\"WerSvc\", \"Windows Error Reporting Service\"),\n            (\"DoSvc\", \"Delivery Optimization\"),\n            (\"TermService\", \"Remote Desktop Service\"),\n            (\"XboxGipSvc\", \"Xbox Accessory Management Service\"),\n            (\"XblAuthManager\", \"Xbox Live Auth Manager\"),\n            (\"XboxNetApiSvc\", \"Xbox Live Networking Service\"),\n        ]\n\n        disabled_count = 0\n        failed_services = []\n        scm_handle = None\n        \n        try:\n            scm_handle = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_ALL_ACCESS)\n\n            for service_name, display_name in services_to_disable:\n                service_handle = None\n                try:\n                    service_handle = win32service.OpenService(scm_handle, service_name, win32service.SERVICE_CHANGE_CONFIG)\n                    win32service.ChangeServiceConfig(\n                        service_handle, \n                        win32service.SERVICE_NO_CHANGE,\n                        win32service.SERVICE_DISABLED,\n                        win32service.SERVICE_NO_CHANGE,\n                        None, None, 0, None, None, None, None\n                    )\n                    print(f\"Successfully set {display_name} to disabled.\")\n                    disabled_count += 1\n                except Exception as e:\n                    if isinstance(e, win32service.error) and e.winerror == 1060:\n                        print(f\"Service not found, skipping: {display_name} ({service_name})\")\n                    else:\n                        print(f\"Could not disable service {display_name}: {e}\")\n                        failed_services.append(display_name)\n                finally:\n                    if service_handle:\n                        win32service.CloseServiceHandle(service_handle)\n        \n        except Exception as e:\n            print(f\"Failed to open Service Control Manager: {e}\")\n            return (False, \"Failed to access Service Control Manager. See console for details.\")\n        finally:\n            if scm_handle:\n                win32service.CloseServiceHandle(scm_handle)\n\n        if not failed_services:\n            return (True, f\"Successfully disabled {disabled_count} services. A restart is required for changes to take full effect.\")\n        elif disabled_count > 0:\n            return (True, f\"Partially completed: Disabled {disabled_count} services. See console for details.\")\n        else:\n            return (False, \"Operation failed. See console for details.\")\n\n    @staticmethod\n    def make_restore_point():\n        print(\"Creating a system restore point...\")\n        try:\n            # Command to create a system restore point using PowerShell\n            command = 'powershell.exe -Command \"Checkpoint-Computer -Description AstreisRestorePoint -RestorePointType MODIFY_SETTINGS\"'\n            \n            # Execute the command\n            result = subprocess.run(command, check=True, capture_output=True, text=True, shell=True)\n            \n            print(f\"Restore point creation stdout: {result.stdout}\")\n            if result.stderr:\n                print(f\"Restore point creation stderr: {result.stderr}\")\n\n            # Check if the command was successful. A zero return code indicates success.\n            if result.returncode == 0:\n                return (True, \"System restore point 'AstreisRestorePoint' created successfully.\")\n            else:\n                return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n\n        except subprocess.CalledProcessError as e:\n            # This catches errors where the command returns a non-zero exit code\n            error_message = f\"Failed to create restore point. Error: {e.stderr}\"\n            print(error_message)\n            return (False, \"Failed to create restore point. The System Restore service might be disabled.\")\n        except Exception as e:\n            # This catches other exceptions like file not found if powershell isn't in path\n            error_message = f\"An unexpected error occurred: {e}\"\n            print(error_message)\n            return (False, \"An unexpected error occurred while creating restore point.\")\n\n    # =============================================================================\n    # POWER MANAGEMENT UTILITIES\n    # =============================================================================\n    @staticmethod\n    def get_available_power_settings(guid):\n        \"\"\"Get list of available power settings for a given GUID\"\"\"\n        try:\n            result = subprocess.run(['powercfg', '/query', guid], capture_output=True, text=True, check=True)\n            available_settings = []\n            current_group = None\n            \n            for line in result.stdout.splitlines():\n                if line.strip().startswith('Subgroup GUID:'):\n                    # Extract subgroup name\n                    if 'SUB_PROCESSOR' in line:\n                        current_group = 'SUB_PROCESSOR'\n                    elif 'SUB_DISK' in line:\n                        current_group = 'SUB_DISK'\n                    elif 'SUB_VIDEO' in line:\n                        current_group = 'SUB_VIDEO'\n                    elif 'SUB_SYSTEM' in line:\n                        current_group = 'SUB_SYSTEM'\n                    elif 'SUB_BUTTONS' in line:\n                        current_group = 'SUB_BUTTONS'\n                    elif 'SUB_USB' in line:\n                        current_group = 'SUB_USB'\n                    elif 'SUB_GRAPHICS' in line:\n                        current_group = 'SUB_GRAPHICS'\n                    elif 'SUB_MEMORY' in line:\n                        current_group = 'SUB_MEMORY'\n                    elif 'SUB_INTERNET' in line:\n                        current_group = 'SUB_INTERNET'\n                    elif 'SUB_MULTIMEDIA' in line:\n                        current_group = 'SUB_MULTIMEDIA'\n                    elif 'SUB_WIRELESSADAPTER' in line:\n                        current_group = 'SUB_WIRELESSADAPTER'\n                elif line.strip().startswith('Power Setting GUID:') and current_group:\n                    # Extract setting name\n                    setting_match = re.search(r'Power Setting GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if setting_match:\n                        setting_guid = setting_match.group(1)\n                        # Try to get the friendly name\n                        try:\n                            name_result = subprocess.run(['powercfg', '/q', guid, setting_guid], \n                                                       capture_output=True, text=True, check=True)\n                            for name_line in name_result.stdout.splitlines():\n                                if 'Friendly Name:' in name_line:\n                                    setting_name = name_line.split('Friendly Name:')[1].strip()\n                                    available_settings.append((current_group, setting_name, setting_guid))\n                                    break\n                        except:\n                            pass\n            \n            return available_settings\n        except Exception as e:\n            print(f\"Error getting available settings: {e}\")\n            return []\n\n    @staticmethod\n    def optimize_defrag():\n        try:\n            print(\"Starting drive defragmentation analysis...\")\n            \n            drives = []\n            ssd_drives = []\n            \n            for partition in psutil.disk_partitions():\n                if partition.device and 'ntfs' in partition.fstype.lower():\n                    drive_letter = partition.device[0]\n                    # Check if it's an SSD\n                    try:\n                        result = subprocess.run(\n                            ['powershell', '-Command', f\"(Get-PhysicalDisk -DeviceNumber (Get-Partition -DriveLetter {drive_letter}).DiskNumber).MediaType\"],\n                            capture_output=True, text=True, check=True, timeout=10\n                        )\n                        if 'ssd' in result.stdout.lower():\n                            ssd_drives.append(drive_letter)\n                    except Exception:\n                        # Fallback for older systems or if powershell fails\n                        try:\n                            result = subprocess.run(['wmic', 'diskdrive', 'get', 'MediaType'], \n                                                 capture_output=True, text=True, check=True, timeout=10)\n                            if 'ssd' in result.stdout.lower():\n                                ssd_drives.append(drive_letter)\n                        except:\n                            pass # Assume HDD if detection fails\n                    drives.append(drive_letter)\n            \n            if not drives:\n                return (False, \"No NTFS drives found to defragment.\")\n\n            results = []\n            defrag_performed = False\n\n            for drive in drives:\n                if drive in ssd_drives:\n                    results.append(f\"Drive {drive}: Skipped (SSD)\")\n                    print(f\"[INFO] Skipping SSD drive {drive}\")\n                    continue\n\n                print(f\"Analyzing drive {drive}:\")\n                try:\n                    analysis_result = subprocess.run(['defrag', f'{drive}:', '/A'], capture_output=True, text=True, timeout=60)\n                    if \"You do not need to defragment this volume\" in analysis_result.stdout:\n                        results.append(f\"Drive {drive}: No defragmentation needed\")\n                        print(f\"[OK] Drive {drive}: No defragmentation needed\")\n                        continue\n                    \n                    if \"It is recommended that you defragment this volume\" in analysis_result.stdout:\n                        print(f\"Defragmenting drive {drive}:\")\n                        defrag_result = subprocess.run(['defrag', f'{drive}:', '/D'], capture_output=True, text=True, timeout=300)\n                        defrag_performed = True\n                        if defrag_result.returncode == 0:\n                            results.append(f\"Drive {drive}: Defragmentation successful\")\n                            print(f\"[OK] Drive {drive}: Defragmentation successful\")\n                        else:\n                            results.append(f\"Drive {drive}: Defragmentation completed with warnings\")\n                            print(f\"[WARNING] Drive {drive}: Defragmentation completed with warnings\")\n                    else:\n                        results.append(f\"Drive {drive}: Analysis complete, no action taken\")\n                        print(f\"[INFO] Drive {drive}: Analysis complete, no action taken\")\n                \n                except subprocess.TimeoutExpired:\n                    results.append(f\"Drive {drive}: Operation timed out\")\n                    print(f\"[WARNING] Timeout on drive {drive}\")\n                except Exception as e:\n                    results.append(f\"Drive {drive}: An error occurred\")\n                    print(f\"[ERROR] Unexpected error with drive {drive}: {e}\")\n\n            final_message = \"Defragmentation Report:\\n\" + \"\\n\".join(results)\n            return (True, final_message)\n\n        except Exception as e:\n            print(f\"Error in optimize_defrag: {str(e)}\")\n            return (False, f\"An error occurred during defragmentation setup: {e}\")\n\n    @staticmethod\n    def optimize_appearance():\n        try:\n            print(\"Starting appearance optimization...\")\n            \n            import winreg\n            import ctypes\n            from ctypes import wintypes\n            \n            user32 = ctypes.windll.user32\n            dwmapi = ctypes.windll.dwmapi\n            \n            SPI_SETUIEFFECTS = 0x103F\n            SPI_SETCOMBOBOXANIMATION = 0x1006\n            SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007\n            SPI_SETGRADIENTCAPTIONS = 0x1008\n            SPI_SETMENUANIMATION = 0x1009\n            SPI_SETSELECTIONFADE = 0x1015\n            SPI_SETTOOLTIPANIMATION = 0x1016\n            SPI_SETCURSORSHADOW = 0x101B\n            SPI_SETICONSHADOW = 0x101C\n            SPI_SETDROPSHADOW = 0x1025\n            SPI_SETBLOCKSENDINPUTRESETS = 0x1026\n            SPI_SETSHOWIMEUI = 0x1027\n            SPI_SETMOUSESONAR = 0x101D\n            SPI_SETMOUSECLICKLOCK = 0x101E\n            SPI_SETMOUSEVANISH = 0x1021\n            SPI_SETFLATMENU = 0x1022\n            SPI_SETDOCKMOVING = 0x1023\n            SPI_SETACTIVEWINDOWTRACKING = 0x1001\n            SPI_SETACTIVEWNDTRKZORDER = 0x100C\n            SPI_SETACTIVEWNDTRKTIMEOUT = 0x2002\n            SPI_SETANIMATION = 0x0049\n            SPI_SETCARETWIDTH = 0x2007\n            SPI_SETCARETBROWSING = 0x2009\n            SPI_SETCLEARTYPE = 0x1049\n            SPI_SETDESKWALLPAPER = 0x0014\n            SPI_SETDRAGFULLWINDOWS = 0x0025\n            SPI_SETDRAGHEIGHT = 0x004D\n            SPI_SETDRAGWIDTH = 0x004C\n            SPI_SETFASTTASKSWITCH = 0x0024\n            SPI_SETFONTSMOOTHING = 0x004B\n            SPI_SETFONTSMOOTHINGCONTRAST = 0x2005\n            SPI_SETFONTSMOOTHINGORIENTATION = 0x2012\n            SPI_SETFONTSMOOTHINGTYPE = 0x200B\n            SPI_SETFOREGROUNDFLASHCOUNT = 0x2000\n            SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001\n            SPI_SETGRIDGRANULARITY = 0x0013\n            SPI_SETICONMETRICS = 0x002E\n            SPI_SETICONTITLELOGFONT = 0x0022\n            SPI_SETICONTITLEWRAP = 0x001A\n            SPI_SETKEYBOARDCUES = 0x100B\n            SPI_SETKEYBOARDPREF = 0x0045\n            SPI_SETLOWPOWERACTIVE = 0x0055\n            SPI_SETLOWPOWERTIMEOUT = 0x0054\n            SPI_SETMENUDROPALIGNMENT = 0x001C\n            SPI_SETMINIMIZEDMETRICS = 0x002C\n            SPI_SETMOUSE = 0x0004\n            SPI_SETMOUSEBUTTONSWAP = 0x0021\n            SPI_SETMOUSECLICKLOCKTIME = 0x2008\n            SPI_SETMOUSEDOUBLECLICKTIME = 0x0015\n            SPI_SETMOUSEDOUBLECLICKWIDTH = 0x0030\n            SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x0045\n            SPI_SETMOUSEHOVERHEIGHT = 0x0064\n            SPI_SETMOUSEHOVERTIME = 0x0066\n            SPI_SETMOUSEHOVERWIDTH = 0x0063\n            SPI_SETMOUSESPEED = 0x0071\n            SPI_SETMOUSETRAILS = 0x005D\n            SPI_SETMOUSEWHEELROUTING = 0x201C\n            SPI_SETNONCLIENTMETRICS = 0x002A\n            SPI_SETPENWINDOWS = 0x0031\n            SPI_SETSCREENSAVEACTIVE = 0x0011\n            SPI_SETSCREENSAVERRUNNING = 0x0061\n            SPI_SETSCREENSAVETIMEOUT = 0x000F\n            SPI_SETSERIALKEYS = 0x003F\n            SPI_SETSHOWSOUNDS = 0x0039\n            SPI_SETSNAPTODEFBUTTON = 0x0060\n            SPI_SETSOUNDSENTRY = 0x0041\n            SPI_SETSTICKYKEYS = 0x003B\n            SPI_SETSYSTEMLANGUAGEBAR = 0x1050\n            SPI_SETTHREADLOCALINPUTSETTINGS = 0x104F\n            SPI_SETTOGGLEKEYS = 0x0035\n            SPI_SETWHEELSCROLLCHARS = 0x006D\n            SPI_SETWHEELSCROLLLINES = 0x0069\n            SPI_SETWORKAREA = 0x002F\n            \n            SPIF_UPDATEINIFILE = 0x01\n            SPIF_SENDCHANGE = 0x02\n            \n            user32.SystemParametersInfoW(SPI_SETUIEFFECTS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCOMBOBOXANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETLISTBOXSMOOTHSCROLLING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETGRADIENTCAPTIONS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMENUANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETSELECTIONFADE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETTOOLTIPANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCURSORSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETICONSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDROPSHADOW, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSESONAR, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSECLICKLOCK, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETMOUSEVANISH, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFLATMENU, 1, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDOCKMOVING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWINDOWTRACKING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKZORDER, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETACTIVEWNDTRKTIMEOUT, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETANIMATION, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETDRAGFULLWINDOWS, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETFONTSMOOTHING, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            user32.SystemParametersInfoW(SPI_SETCLEARTYPE, 0, None, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"VisualFXSetting\", 0, winreg.REG_DWORD, 2)\n            except Exception as e:\n                print(f\"Registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\DWM\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"EnableAeroPeek\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AlwaysHibernateThumbnails\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"DWM registry modification failed: {e}\")\n            \n            try:\n                key_path = r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\"\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:\n                    winreg.SetValueEx(key, \"IconsOnly\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewAlphaSelect\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewShadow\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"TaskbarAnimations\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"ListviewWatermark\", 0, winreg.REG_DWORD, 0)\n            except Exception as e:\n                print(f\"Explorer registry modification failed: {e}\")\n            \n            print(\"Appearance optimization completed successfully\")\n            return (True, \"Appearance optimized for performance.\")\n            \n        except Exception as e:\n            print(f\"Error in optimize_appearance: {str(e)}\")\n            return (False, f\"An error occurred: {e}\")\n\n    @staticmethod\n    def optimize_astreis_power_plan():\n        try:\n            print(\"Starting power plan optimization...\")\n            power_plan_name = \"Astreis Power Plan\"\n            high_perf_guid = \"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\"\n            \n            # First, check if the power plan already exists\n            print(\"Checking for existing power plan...\")\n            result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n            guid = None\n            \n            for line in result.stdout.splitlines():\n                if power_plan_name in line:\n                    print(f\"Found existing power plan: {line}\")\n                    match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                    if match:\n                        guid = match.group(1)\n                        print(f\"Extracted GUID: {guid}\")\n                        break\n            \n            # If not found, create it by duplicating the high performance plan\n            if not guid:\n                print(\"Power plan not found, creating new one...\")\n                result = subprocess.run(['powercfg', '/duplicatescheme', high_perf_guid], capture_output=True, text=True, check=True)\n                print(f\"Duplicate result: {result.stdout}\")\n                \n                # Extract GUID from the duplicate result\n                for line in result.stdout.splitlines():\n                    if 'GUID:' in line:\n                        match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                        if match:\n                            guid = match.group(1)\n                            print(f\"Created new power plan with GUID: {guid}\")\n                            break\n                \n                # If still no GUID, try listing again\n                if not guid:\n                    print(\"GUID not found in duplicate result, checking list again...\")\n                    result = subprocess.run(['powercfg', '/list'], capture_output=True, text=True, check=True)\n                    for line in result.stdout.splitlines():\n                        if power_plan_name in line:\n                            match = re.search(r'GUID: ([0-9a-f-]+)', line, re.IGNORECASE)\n                            if match:\n                                guid = match.group(1)\n                                print(f\"Found GUID in second list: {guid}\")\n                                break\n            \n            if guid:\n                print(f\"Configuring power plan with GUID: {guid}\")\n                # Rename the power plan\n                subprocess.run(['powercfg', '/changename', guid, power_plan_name], check=True)\n                print(\"Power plan renamed successfully\")\n                \n                # Configure power plan settings - only use the most essential and widely-supported settings\n                essential_settings = [\n                    # Core processor settings (most important for performance)\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMAX', '100'),\n                    ('SUB_PROCESSOR', 'PROCTHROTTLEMIN', '50'),\n                    ('SUB_PROCESSOR', 'PERFBOOSTMODE', '1'),\n                    ('SUB_PROCESSOR', 'CPMAXCORES', '100'),\n                    ('SUB_PROCESSOR', 'LATENCYHINTPERF', '1'),\n                    ('SUB_PROCESSOR', 'IDLESCALING', '0'),\n                    ('SUB_PROCESSOR', 'PERFINCTHRESHOLD', '90'),\n                    ('SUB_PROCESSOR', 'CPMINCORES', '100'),\n                    ('SUB_PROCESSOR', 'SCHEDPOLICY', '5'),\n                    \n                    # Core system settings\n                    ('SUB_DISK', 'DISKIDLE', '0'),\n                    ('SUB_VIDEO', 'VIDEOIDLE', '0'),\n                    ('SUB_BUTTONS', 'PBUTTONACTION', '3'),\n                    ('SUB_SYSTEM', 'AWAYMODE', '0'),\n                    ('SUB_USB', 'USBSUSPEND', '0'),\n                ]\n                \n                print(\"Applying essential power plan settings...\")\n                successful_settings = 0\n                total_settings = len(essential_settings)\n                \n                for group, setting, value in essential_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        successful_settings += 1\n                        print(f\"[OK] Applied {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"[WARNING] Skipped {group}/{setting} (not available on this system)\")\n                    except Exception as e:\n                        print(f\"[WARNING] Error with {group}/{setting}: {e}\")\n                \n                print(f\"Successfully applied {successful_settings}/{total_settings} essential settings\")\n                \n                # Try some additional settings that might be available\n                optional_settings = [\n                    ('SUB_PROCESSOR', 'PERFAUTONOMOUS', '1'),\n                    ('SUB_PROCESSOR', 'PERFCHECK', '1'),\n                    ('SUB_BUTTONS', 'LIDACTION', '0'),\n                    ('SUB_BUTTONS', 'SBUTTONACTION', '0'),\n                    ('SUB_SYSTEM', 'SLEEPIDLETIMEOUT', '0'),\n                    ('SUB_GRAPHICS', 'GPUPowerPolicy', '0'),\n                    ('SUB_MEMORY', 'MEMLATENCY', '0'),\n                ]\n                \n                print(\"Applying optional power plan settings...\")\n                for group, setting, value in optional_settings:\n                    try:\n                        subprocess.run(['powercfg', '/setacvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        subprocess.run(['powercfg', '/setdcvalueindex', guid, group, setting, value], \n                                     capture_output=True, check=True)\n                        print(f\"[OK] Applied optional {group}/{setting} = {value}\")\n                    except subprocess.CalledProcessError:\n                        pass  # Silently skip optional settings\n                    except Exception as e:\n                        print(f\"[WARNING] Error with optional {group}/{setting}: {e}\")\n                \n                # Activate the power plan\n                print(\"Activating power plan...\")\n                subprocess.run(['powercfg', '/setactive', guid], check=True)\n                print(f\"Astreis Power Plan {guid} configured and activated successfully\")\n                return (True, \"Astreis Power Plan configured and activated.\")\n            else:\n                print(\"Failed to create or find Astreis Power Plan - no GUID obtained\")\n                return (False, \"Failed to create or find Astreis Power Plan.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing powercfg command: {e}\")\n            print(f\"Command output: {e.stdout if hasattr(e, 'stdout') else 'No output'}\")\n            print(f\"Command error: {e.stderr if hasattr(e, 'stderr') else 'No error'}\")\n            return (False, f\"A powercfg command failed: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error in optimize_astreis_power_plan: {str(e)}\")\n            return (False, f\"An unexpected error occurred: {e}\")\n\n    @staticmethod\n    def optimize_registry():\n        print(\"optimize_registry: Starting\")\n        try:\n            backup_dir = os.path.expanduser(\"~/Astreis_Registry_Backups\")\n            os.makedirs(backup_dir, exist_ok=True)\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # e.g., 20250626_1623\n            print(f\"optimize_registry: Creating backups with timestamp {timestamp}\")\n            backup_path_hklm = os.path.join(backup_dir, f\"registry_hklm_backup_{timestamp}.reg\")\n            backup_path_hkcu = os.path.join(backup_dir, f\"registry_hkcu_backup_{timestamp}.reg\")\n            backup_path_hkcr = os.path.join(backup_dir, f\"registry_hkcr_backup_{timestamp}.reg\")\n            subprocess.run([\"reg\", \"save\", \"HKLM\", backup_path_hklm], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCU\", backup_path_hkcu], check=False)\n            subprocess.run([\"reg\", \"save\", \"HKCR\", backup_path_hkcr], check=False)\n            if not (os.path.exists(backup_path_hklm) and os.path.exists(backup_path_hkcu) and os.path.exists(\n                    backup_path_hkcr)):\n                print(\"optimize_registry: Backup creation failed due to permissions\")\n                return (False, \"Skipped: Insufficient permissions to create backups. Run as Administrator.\")\n            invalid_entries = [\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"InvalidApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"TempApp\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", \"ObsoleteApp\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\Extensions\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\", \"ObsoleteService\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\",\n                 \"InvalidFolder\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppCompatFlags\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Internet Explorer\\TypedURLs\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Print\\Printers\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\", \"InvalidApp.exe\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\", None),\n                (winreg.HKEY_CLASSES_ROOT, r\".invalid\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.invalid\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\", \"InvalidFont\"),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\COM3\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\",\n                 \"InvalidPath\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\", None),\n                (winreg.HKEY_CURRENT_USER,\n                 r\"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Search Assistant\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs\", \"InvalidDLL.dll\"),\n                (winreg.HKEY_CLASSES_ROOT, r\"TypeLib\", None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupCommands\",\n                 None),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\",\n                 None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Network\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\",\n                 \"InvalidVar\"),\n                (winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\PowerShell\", None),\n                (winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\",\n                 None)\n            ]\n            deleted_count = 0\n            for hive, subkey, value_name in invalid_entries:\n                print(f\"optimize_registry: Checking {subkey} for {value_name or 'subkeys'}\")\n                try:\n                    with winreg.OpenKey(hive, subkey, 0, winreg.KEY_ALL_ACCESS) as key:\n                        if value_name:\n                            try:\n                                winreg.DeleteValue(key, value_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted value {value_name} in {subkey}\")\n                            except (FileNotFoundError, PermissionError):\n                                print(f\"optimize_registry: Value {value_name} not found or access denied in {subkey}\")\n                                continue\n                        else:\n                            subkeys = []\n                            try:\n                                for i in range(winreg.QueryInfoKey(key)[0]):\n                                    subkey_name = winreg.EnumKey(key, i)\n                                    subkeys.append(subkey_name)\n                            except (WindowsError, PermissionError):\n                                print(f\"optimize_registry: Failed to enumerate subkeys in {subkey}\")\n                                continue\n                            for subkey_name in subkeys:\n                                try:\n                                    with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                        try:\n                                            winreg.DeleteKey(key, subkey_name)\n                                            deleted_count += 1\n                                            print(f\"optimize_registry: Deleted subkey {subkey_name} in {subkey}\")\n                                        except (WindowsError, PermissionError):\n                                            print(\n                                                f\"optimize_registry: Failed to delete subkey {subkey_name} in {subkey}\")\n                                            continue\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Access denied to subkey {subkey_name} in {subkey}\")\n                                    continue\n                except (FileNotFoundError, PermissionError):\n                    print(f\"optimize_registry: Key {subkey} not found or access denied\")\n                    continue\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted shell extension {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete shell extension {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate shell extensions\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Shell Extensions key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Explorer\", \"System\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            try:\n                subprocess.run(\n                    [\"reg\", \"delete\", r\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\",\n                     \"/f\"], check=False)\n                deleted_count += 1\n                print(\"optimize_registry: Cleared OpenSaveMRU\")\n            except subprocess.CalledProcessError:\n                print(\"optimize_registry: Failed to clear OpenSaveMRU\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted NameSpace entry {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete NameSpace entry {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: NameSpace key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"*\\shellex\\ContextMenuHandlers\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted ContextMenuHandler {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete ContextMenuHandler {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate ContextMenuHandlers\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: ContextMenuHandlers key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r\"\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name.startswith(\".\") and subkey_name.endswith(\".invalid\"):\n                                winreg.DeleteKey(key, subkey_name)\n                                deleted_count += 1\n                                print(f\"optimize_registry: Deleted invalid extension {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete invalid extension {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Root key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Control Panel\\Desktop\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"CachedWallpaper\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared CachedWallpaper\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear CachedWallpaper\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Desktop key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SYSTEM\\CurrentControlSet\\Control\\Class\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            with winreg.OpenKey(key, subkey_name, 0, winreg.KEY_ALL_ACCESS) as sub_key:\n                                try:\n                                    winreg.DeleteKey(key, subkey_name)\n                                    deleted_count += 1\n                                    print(f\"optimize_registry: Deleted Class entry {subkey_name}\")\n                                except (WindowsError, PermissionError):\n                                    print(f\"optimize_registry: Failed to delete Class entry {subkey_name}\")\n                                    continue\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to enumerate Class entries\")\n                            pass\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Class key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,\n                                    r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\", 0,\n                                    winreg.KEY_ALL_ACCESS) as key:\n                    try:\n                        winreg.DeleteValue(key, \"NoAutoRun\")\n                        deleted_count += 1\n                        print(\"optimize_registry: Cleared NoAutoRun\")\n                    except (FileNotFoundError, PermissionError):\n                        print(\"optimize_registry: Failed to clear NoAutoRun\")\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Explorer Policies key not accessible\")\n                pass\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Policies\", 0, winreg.KEY_ALL_ACCESS) as key:\n                    for i in range(winreg.QueryInfoKey(key)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(key, i)\n                            if subkey_name in [\"Microsoft\\Windows\"]:\n                                continue\n                            winreg.DeleteKey(key, subkey_name)\n                            deleted_count += 1\n                            print(f\"optimize_registry: Deleted policy {subkey_name}\")\n                        except (WindowsError, PermissionError):\n                            print(f\"optimize_registry: Failed to delete policy {subkey_name}\")\n                            continue\n            except (FileNotFoundError, PermissionError):\n                print(\"optimize_registry: Policies key not accessible\")\n                pass\n            if deleted_count > 0:\n                print(f\"optimize_registry: Completed with {deleted_count} deletions\")\n                return (True,\n                        f\"Registry optimized: {deleted_count} invalid entries removed. Backups saved to {backup_dir}\")\n            else:\n                print(\"optimize_registry: No deletions performed\")\n                return (True, f\"No invalid registry entries found. Backups saved to {backup_dir}\")\n        except PermissionError:\n            print(\"optimize_registry: Permission denied, skipping\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except subprocess.CalledProcessError:\n            print(\"optimize_registry: Backup process failed\")\n            return (False, \"Skipped: Failed to create registry backup. Run as Administrator.\")\n        except Exception as e:\n            print(f\"optimize_registry: Unexpected error: {str(e)}\")\n            return (False, \"Skipped: An unexpected error occurred. Run as Administrator.\")\n\n    @staticmethod\n    def disable_search_index():\n        try:\n            subprocess.run([\"sc\", \"stop\", \"WSearch\"], shell=True)\n            subprocess.run([\"sc\", \"config\", \"WSearch\", \"start=\", \"disabled\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchIndexer.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchUI.exe\"], shell=True)\n            subprocess.run([\"taskkill\", \"/f\", \"/im\", \"SearchApp.exe\"], shell=True)\n\n            index_path = os.path.join(os.environ[\"ProgramData\"], \"Microsoft\", \"Search\", \"Data\")\n            if os.path.exists(index_path):\n                subprocess.run(f'rmdir /s /q \"{index_path}\"', shell=True)\n\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\", 0,\n                                    winreg.KEY_SET_VALUE) as key:\n                    winreg.SetValueEx(key, \"BingSearchEnabled\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"AllowCortana\", 0, winreg.REG_DWORD, 0)\n                    winreg.SetValueEx(key, \"CortanaConsent\", 0, winreg.REG_DWORD, 0)\n            except:\n                pass\n\n            return True, \"Disabled successfully\"\n\n        except Exception as e:\n            return False, f\"Failed with error - {e}\"\n\n    @staticmethod\n    def enable_classic_right_click():\n        print(\"enable_classic_right_click: Starting\")\n        try:\n            key_path = r\"Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\"\n            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:\n                winreg.SetValueEx(key, \"\", 0, winreg.REG_SZ, \"\")\n                print(\"enable_classic_right_click: Set registry value\")\n            subprocess.run(\"taskkill /f /im explorer.exe\", shell=True)\n            print(\"enable_classic_right_click: Killed explorer.exe\")\n            subprocess.run(\"start explorer\", shell=True)\n            print(\"enable_classic_right_click: Restarted explorer.exe\")\n            return (True, \"Classic right-click enabled successfully\")\n        except PermissionError:\n            print(\"enable_classic_right_click: Permission denied\")\n            return (False, \"Skipped: Insufficient permissions. Run as Administrator.\")\n        except Exception as e:\n            print(f\"enable_classic_right_click: Error: {str(e)}\")\n            return (False, \"Skipped: Failed to enable classic right-click. Run as Administrator.\")\n\n    @staticmethod\n    def run_windows_utility():\n        try:\n            command = 'powershell -Command \"irm https://christitus.com/win | iex\"'\n            subprocess.run(command, shell=True, check=True)\n            print(\"✅ Script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Failed to run script: {e}\")\n\n    @staticmethod\n    def clean_temporary_files():\n        paths_to_clean = [\n            tempfile.gettempdir(),  # %TEMP%\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Prefetch'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'SoftwareDistribution', 'Download')\n        ]\n\n        for path in paths_to_clean:\n            if not os.path.exists(path):\n                print(f\"Skipped: {path} (does not exist)\")\n                continue\n\n            for root, dirs, files in os.walk(path):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    try:\n                        os.remove(file_path)\n                        print(f\"Deleted file: {file_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete {file_path}: {e}\")\n\n                for dir in dirs:\n                    dir_path = os.path.join(root, dir)\n                    try:\n                        shutil.rmtree(dir_path, ignore_errors=True)\n                        print(f\"Deleted folder: {dir_path}\")\n                    except Exception as e:\n                        print(f\"Failed to delete folder {dir_path}: {e}\")\n\n        # Recycle Bin Cleanup\n        try:\n            print(\"Cleaning Recycle Bin...\")\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000001)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n        print(\"System cleanup completed.\")\n\n    @staticmethod\n    def empty_recycle_bin():\n        try:\n            ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, 0x00000007)\n            print(\"Recycle Bin emptied.\")\n        except Exception as e:\n            print(f\"Failed to empty Recycle Bin: {e}\")\n\n    @staticmethod\n    def clean_all_browser_caches():\n        browser_paths = {\n            \"Chrome\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Google\", \"Chrome\", \"User Data\"),\n            \"Edge\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Microsoft\", \"Edge\", \"User Data\"),\n            \"Firefox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"Firefox\", \"Profiles\"),\n            \"Brave\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"BraveSoftware\", \"Brave-Browser\", \"User Data\"),\n            \"Opera\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera Stable\"),\n            \"Opera GX\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Opera Software\", \"Opera GX Stable\"),\n            \"Vivaldi\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Vivaldi\", \"User Data\"),\n            \"Maxthon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Maxthon5\", \"Users\"),\n            \"Yandex\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Yandex\", \"YandexBrowser\", \"User Data\"),\n            \"Comodo Dragon\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Comodo\", \"Dragon\", \"User Data\"),\n            \"SRWare Iron\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Chromium\", \"User Data\"),\n            \"Torch\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Torch\", \"User Data\"),\n            \"Epic\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Epic Privacy Browser\", \"User Data\"),\n            \"Waterfox\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Waterfox\", \"Profiles\"),\n            \"Slimjet\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"Slimjet\", \"User Data\"),\n            \"Cent Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"CentBrowser\", \"User Data\"),\n            \"Pale Moon\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Moonchild Productions\", \"Pale Moon\", \"Profiles\"),\n            \"SeaMonkey\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Mozilla\", \"SeaMonkey\", \"Profiles\"),\n            \"Avant\": os.path.join(os.getenv(\"APPDATA\", \"\"), \"Avant Profiles\"),\n            \"UC Browser\": os.path.join(os.getenv(\"LOCALAPPDATA\", \"\"), \"UCBrowser\", \"User Data\")\n        }\n\n        for browser, path in browser_paths.items():\n            if not os.path.exists(path):\n                print(f\"{browser} not found. Skipping.\")\n                continue\n\n            print(f\"Cleaning {browser} cache...\")\n\n            if browser in [\"Firefox\", \"Waterfox\", \"SeaMonkey\", \"Pale Moon\"]:\n                for profile in Path(path).glob(\"*\"):\n                    cache = profile / \"cache2\"\n                    if cache.exists():\n                        try:\n                            shutil.rmtree(cache, ignore_errors=True)\n                            print(f\"Deleted {browser} cache: {cache}\")\n                        except Exception as e:\n                            print(f\"Failed to delete {browser} cache: {e}\")\n            else:\n                for root, dirs, _ in os.walk(path):\n                    if \"Cache\" in dirs:\n                        cache_path = os.path.join(root, \"Cache\")\n                        try:\n                            shutil.rmtree(cache_path, ignore_errors=True)\n                            print(f\"Deleted cache: {cache_path}\")\n                        except Exception as e:\n                            print(f\"Failed to delete cache at {cache_path}: {e}\")\n        print(\"All browser caches cleaned.\")\n\n    @staticmethod\n    def clean_all_logs():\n        logs = [\n            \"Application\",\n            \"Security\",\n            \"Setup\",\n            \"System\",\n            \"ForwardedEvents\",\n            \"Windows PowerShell\",\n            \"Microsoft-Windows-DNS-Client/Operational\",\n            \"Microsoft-Windows-Windows Defender/Operational\",\n            \"Microsoft-Windows-WindowsUpdateClient/Operational\",\n            \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\",\n            \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\",\n            \"Microsoft-Windows-TaskScheduler/Operational\",\n            \"Microsoft-Windows-GroupPolicy/Operational\"\n        ]\n        for log in logs:\n            try:\n                subprocess.run([\"wevtutil\", \"clear-log\", log], check=True, stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n                print(f\"Cleared {log} log.\")\n            except subprocess.CalledProcessError:\n                print(f\"Failed to clear {log} log.\")\n\n        paths = [\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Temp'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'System32', 'LogFiles'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'Logs', 'CBS'),\n            os.path.join(os.environ.get('SystemRoot', 'C:\\\\Windows'), 'WindowsUpdate.log')\n        ]\n        for path in paths:\n            if os.path.isfile(path):\n                try:\n                    os.remove(path)\n                    print(f\"Deleted file: {path}\")\n                except Exception:\n                    print(f\"Failed to delete file: {path}\")\n            elif os.path.isdir(path):\n                try:\n                    shutil.rmtree(path, ignore_errors=True)\n                    print(f\"Deleted folder: {path}\")\n                except Exception:\n                    print(f\"Failed to delete folder: {path}\")\n\n        print(\"All logs and related files cleaned.\")\n\n    @staticmethod\n    def run_disk_cleanup():\n        try:\n            subprocess.run([\"cleanmgr.exe\", \"/sagerun:1\"], check=True)\n            print(\"Disk Cleanup ran successfully.\")\n        except Exception as e:\n            print(f\"Failed to run Disk Cleanup: {e}\")\n\n    @staticmethod\n    def run_debloat_script():\n        cmd = (\n            'powershell -NoProfile -ExecutionPolicy Bypass -Command '\n            '& ([scriptblock]::Create((irm \"https://debloat.raphi.re/\")))'\n        )\n        try:\n            subprocess.run(cmd, shell=True, check=True, text=True)\n            print(\"Debloat script executed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to run debloat script: {e}\")\n\n    @staticmethod\n    def placeholder():\n        pass\n"
                    },
                    {
                        "path": "main.py",
                        "fsPath": "main.py"
                    }
                ]
            },
            "createdAt": 1751034563177,
            "isInternal": false
        }
    ],
    "isAgent": false,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}